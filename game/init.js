// ======== init.js ========

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
  const now = Date.now();
  const secondsPassed = Math.floor((now - lastUpdateTime) / 1000);
  lastUpdateTime = now;
  
  gameTime -= secondsPassed;
  
  while (gameTime <= 0) {
    gameTime += CYCLE_DURATION;
    const wasNight = !isDay;
    isDay = !isDay;
    
    if (wasNight) {
      nightsSurvived++;
      
      if (coalEnabled) {
        nightsWithCoal++;
        
        if (inventory['–£–≥–æ–ª—å'] > 0) {
          inventory['–£–≥–æ–ª—å']--;
          log('üåô –ù–æ—á—å - —Å–≥–æ—Ä–µ–ª 1 —É–≥–æ–ª—å');
        } else {
          coalEnabled = false;
          log('üåô –ù–æ—á—å - —É–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        }
      }
      
      // –ê—Ç–∞–∫–∞ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
      const defensePower = upgrades.defense ? 30 + (upgrades.defenseLevel * 15) : 0;
      if (Math.random() * 100 > defensePower) {
        handleRebelAttack();
      } else if (upgrades.defense) {
        log('üåô –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç—Ä–∞–∑–∏–ª–∞ –∞—Ç–∞–∫—É –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤');
        successfulDefenses++;
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤ –Ω–æ—á—å—é
      if (Math.random() < 0.3) {
        rebelActivity++;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–æ—á—å—é
      checkQuestsProgress();
    } else {
      // –î–µ–Ω—å - —Å–Ω–∏–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
      rebelActivity = Math.max(0, rebelActivity - 1);
    }
    
    log(isDay ? '‚òÄÔ∏è –ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å' : 'üåô –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å');
    saveGame();
  }

  // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
  passiveCounter += secondsPassed;
  while (passiveCounter >= 10) {
    passiveCounter -= 10;
    const aiActive = (isDay || coalEnabled) && Date.now() > aiDisabledUntil;
    if (aiActive) {
      const coalChance = 0.003 + (upgrades.mining * 0.001);
      const trashChance = 0.007 + (upgrades.mining * 0.001);
      const chipChance = 0.001;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–ê–°–°–ò–í–ù–ê–Ø –î–û–ë–´–ß–ê –ü–õ–ê–ó–ú–´
      let plasmaChance = 0;
      if (plasmaUnlocked) {
        plasmaChance = 0.0005 + (upgrades.mining * 0.0001);
        // –ë–æ–Ω—É—Å –ø–æ—Å–ª–µ –∫–≤–µ—Å—Ç–∞
        const plasmaQuest = storyQuests.find(q => q.id === 'plasma_breakthrough');
        if (plasmaQuest && plasmaQuest.completed) {
          plasmaChance += 0.0003;
        }
      }
      
      if (Math.random() < coalChance) {
        inventory['–£–≥–æ–ª—å']++;
        totalMined++;
      }
      if (Math.random() < trashChance) {
        inventory['–ú—É—Å–æ—Ä']++;
        totalMined++;
      }
      if (Math.random() < chipChance) {
        inventory['–ß–∏–ø—ã']++;
        totalMined++;
      }
      if (Math.random() < plasmaChance) {
        inventory['–ü–ª–∞–∑–º–∞']++;
        totalMined++;
      }
      
      saveGame();
      checkQuestsProgress();
    }
  }

  // –ú–∏–Ω–∏-–∏–≤–µ–Ω—Ç—ã –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
  handleRebelEvents();
  
  render();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–Ω–∏-–∏–≤–µ–Ω—Ç–æ–≤ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
function handleRebelEvents() {
  // –°–ª—É—á–∞–π–Ω—ã–µ –º–∏–Ω–∏-–∏–≤–µ–Ω—Ç—ã –æ—Ç –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
  if (rebelActivity > 3 && Math.random() < 0.1) {
    const events = [
      () => {
        log("üö® –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –¥–æ–±—ã—á—É! –°–ª–µ–¥—É—é—â–∏–µ 2 –∫–ª–∏–∫–∞ –Ω–µ –ø—Ä–∏–Ω–µ—Å—É—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.");
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      },
      () => {
        if (tng > 0) {
          const stolenMoney = Math.min(tng, Math.floor(tng * 0.2));
          tng -= stolenMoney;
          log(`üö® –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã —É–∫—Ä–∞–ª–∏ ${stolenMoney}‚Ç∏ –∏–∑ –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤!`);
        }
      },
      () => {
        if (upgrades.defense) {
          log("üö® –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã –ø—Ä–æ–≤–æ–¥—è—Ç –¥–∏–≤–µ—Ä—Å–∏—é! –ó–∞—â–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å–ª–∞–±–ª–µ–Ω–∞.");
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ –∫ –∑–∞—â–∏—Ç–µ
        }
      },
      () => {
        // –ö—Ä–∞–∂–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
        const resources = Object.keys(inventory).filter(k => k !== '–ò–ò' && inventory[k] > 0);
        if (resources.length > 0) {
          const stolenResource = resources[Math.floor(Math.random() * resources.length)];
          const amount = Math.min(inventory[stolenResource], 2);
          if (amount > 0) {
            inventory[stolenResource] -= amount;
            log(`üö® –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã —É–∫—Ä–∞–ª–∏ ${amount} ${stolenResource}!`);
          }
        }
      }
    ];
    
    const randomEvent = events[Math.floor(Math.random() * events.length)];
    randomEvent();
    saveGame();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initEventListeners() {
  mineBtn.addEventListener('click', mineResources);
  upgradeMiningBtn.addEventListener('click', upgradeMining);
  upgradeDefenseBtn.addEventListener('click', activateDefense);
  upgradeDefenseLevelBtn.addEventListener('click', upgradeDefense);
  clearLogBtn.addEventListener('click', clearLog);
  autoScrollBtn.addEventListener('click', toggleAutoScroll);
  buyModeBtn.addEventListener('click', () => toggleBuySellMode(true));
  sellModeBtn.addEventListener('click', () => toggleBuySellMode(false));
  
  document.querySelectorAll('.panel-title').forEach(title => {
    title.addEventListener('click', (e) => {
      if (e.target.classList.contains('collapse-icon')) return;
      toggleCollapse(title.closest('.panel'));
    });
  });
  
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      switchTab(tab.dataset.tab);
    });
  });
}

function initGame() {
  loadGame();
  initEventListeners();
  setupRadioPlayer();
  
  render();
  toggleBuySellMode(true);
  
  setInterval(gameLoop, 1000);
  
  log('–°–∏—Å—Ç–µ–º–∞ CoreBox 2.9 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤!');
  log('–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–ø–ª–µ–∫—Å–∞ –∏ –∑–∞—â–∏—Ç–∏—Ç—å –µ–≥–æ –æ—Ç –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤');
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', initGame);

document.addEventListener('DOMContentLoaded', function() {
  loadGame();
  sanitizeInventory();
  autoUnlockResources();
  render();
  startGameLoop();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
function startGameLoop() {
  setInterval(gameLoop, 1000);
}