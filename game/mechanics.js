// ======== mechanics.js ========

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateTrashPrice() {
  const basePrice = 2;
  const priceDrop = Math.floor(trashSold / 8) * 0.03;
  return Math.round(Math.max(basePrice - priceDrop, 1));
}

function handleRebelAttack() {
  const defensePower = upgrades.defense ? 30 + (upgrades.defenseLevel * 15) : 0;
  const threatLevel = Math.min(1, rebelActivity * 0.15);
  
  const attackChance = threatLevel * (1 - defensePower / 100);
  
  if (Math.random() < attackChance) {
    const attackTypes = [];
    
    // –ë–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∞—Ç–∞–∫–∏
    if (Object.keys(inventory).filter(k => k !== '–ò–ò' && inventory[k] > 0).length > 0) {
      attackTypes.push(0, 0); // –£–¥–≤–∞–∏–≤–∞–µ–º —à–∞–Ω—Å –∫—Ä–∞–∂–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    }
    if (upgrades.mining > 0) {
      attackTypes.push(1, 1); // –£–¥–≤–∞–∏–≤–∞–µ–º —à–∞–Ω—Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –¥–æ–±—ã—á–∏
    }
    if (inventory['–ú—É—Å–æ—Ä'] > 0 && trashUnlocked) {
      attackTypes.push(2);
    }
    if (upgrades.defense) {
      attackTypes.push(3, 3); // –£–¥–≤–∞–∏–≤–∞–µ–º —à–∞–Ω—Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã
    }
    attackTypes.push(4, 4); // –£–¥–≤–∞–∏–≤–∞–µ–º —à–∞–Ω—Å –≤–∑–ª–æ–º–∞ –ò–ò
    
    if (attackTypes.length === 0) return;
    
    const attackType = attackTypes[Math.floor(Math.random() * attackTypes.length)];
    let message = "üåô –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏!";
    let severeAttack = false;
    let resourceLoss = 0;
    
    switch(attackType) {
      case 0:
        const resources = Object.keys(inventory).filter(k => k !== '–ò–ò' && inventory[k] > 0);
        if (resources.length > 0) {
          const stolenResource = resources[Math.floor(Math.random() * resources.length)];
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫—Ä–∞–∂—É —Ä–µ—Å—É—Ä—Å–æ–≤
          const amount = Math.min(inventory[stolenResource], 
            Math.floor(Math.random() * (6 - upgrades.defenseLevel)) + 2);
          inventory[stolenResource] -= amount;
          resourceLoss = amount;
          message += ` –£–∫—Ä–∞–¥–µ–Ω–æ ${amount} ${stolenResource}`;
          severeAttack = amount > 3;
        }
        break;
        
      case 1:
        if (upgrades.mining > 0) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
          const levelsLost = Math.random() < 0.3 ? 2 : 1;
          upgrades.mining = Math.max(0, upgrades.mining - levelsLost);
          message += ` –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–±—ã—á–∏! –£—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–∂–µ–Ω –Ω–∞ ${levelsLost}`;
          severeAttack = levelsLost > 1;
          
          // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          if (Math.random() < 0.5) {
            const penaltyTime = 120000; // 2 –º–∏–Ω—É—Ç—ã
            log("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–±—ã—á–∏ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã");
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à—Ç—Ä–∞—Ñ–∞
          }
        }
        break;
        
      case 2:
        if (inventory['–ú—É—Å–æ—Ä'] > 0 && trashUnlocked) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º—É—Å–æ—Ä–∞
          const destroyPercentage = 0.4 + Math.random() * 0.4;
          const destroyed = Math.floor(inventory['–ú—É—Å–æ—Ä'] * destroyPercentage);
          inventory['–ú—É—Å–æ—Ä'] -= destroyed;
          resourceLoss = destroyed;
          message += ` –£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ ${destroyed} –º—É—Å–æ—Ä–∞ (${Math.round(destroyPercentage * 100)}%)`;
          severeAttack = destroyPercentage > 0.6;
        }
        break;
        
      case 3:
        if (upgrades.defense) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã
          if (Math.random() < 0.4) {
            upgrades.defense = false;
            message += " –¢—É—Ä—Ä–µ–ª–∏ –∑–∞—â–∏—Ç—ã –≤—ã–≤–µ–¥–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ—è!";
            severeAttack = true;
            
            // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ 1 –Ω–æ—á—å
            log("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —É—Ç—Ä–æ–º");
          }
        }
        break;
        
      case 4:
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∑–ª–æ–º–∞
        if (Math.random() < 0.15) {
          const disableTime = 240000 + (180000 * (1 - upgrades.defenseLevel * 0.15));
          aiDisabledUntil = Date.now() + disableTime;
          const minutes = Math.ceil(disableTime / 60000);
          message += ` –í–∑–ª–æ–º –ò–ò! –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ${minutes} –º–∏–Ω—É—Ç`;
          severeAttack = true;
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ - –ø–æ—Ç–µ—Ä—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
          if (Math.random() < 0.5) {
            const resources = Object.keys(inventory).filter(k => k !== '–ò–ò' && inventory[k] > 0);
            if (resources.length > 0) {
              const stolenResource = resources[Math.floor(Math.random() * resources.length)];
              const amount = Math.min(inventory[stolenResource], 3);
              inventory[stolenResource] -= amount;
              log(`üí• –í–∑–ª–æ–º –ø—Ä–∏–≤–µ–ª –∫ –ø–æ—Ç–µ—Ä–µ ${amount} ${stolenResource}`);
            }
          }
        }
        break;
    }
    
    log(message);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–∏
    rebelActivity += severeAttack ? 3 : 2;
    
    if (severeAttack && upgrades.defenseLevel > 0 && Math.random() < 0.7) {
      upgrades.defenseLevel--;
      log("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –ø–æ–Ω–∏–∂–µ–Ω –∏–∑-–∑–∞ —Å–µ—Ä—å–µ–∑–Ω–æ–π –∞—Ç–∞–∫–∏ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤");
    }
    
    // –ú–∏–Ω–∏-–∏–≤–µ–Ω—Ç: —É—Å–∏–ª–µ–Ω–∏–µ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—Ç–∞–∫
    if (rebelActivity >= 5 && Math.random() < 0.3) {
      log("üö® –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã —É—Å–∏–ª–∏–≤–∞—é—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!");
      rebelActivity += 2;
    }
    
    saveGame();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
function handleCoalInteraction() {
  if (coalEnabled) {
    coalEnabled = false;
    log('‚ö° –£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  } else {
    if (inventory['–£–≥–æ–ª—å'] > 0) {
      inventory['–£–≥–æ–ª—å']--;
      coalEnabled = true;
      log('‚ö° –£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (-1 —É–≥–æ–ª—å)');
      
      if (currentQuestIndex < storyQuests.length && 
          storyQuests[currentQuestIndex].type === 'activate_coal') {
        checkQuestsProgress();
      }
    } else {
      log('‚ùå –ù–µ—Ç —É–≥–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–≠–¶!');
    }
  }
  saveGame();
  render();
}

function mineResources() {
  const aiActive = (isDay || coalEnabled) && Date.now() > aiDisabledUntil;
  if (!aiActive) {
    log('‚ùå –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ù—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è –¥–æ–±—ã—á–∏');
    return;
  }
  
  let coalChance = 0.015 + (coalEnabled ? 0.015 : 0) + (upgrades.mining * 0.008);
  let trashChance = 0.01 + (coalEnabled ? 0.008 : 0) + (upgrades.mining * 0.005);
  
  // –ß–∏–ø—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–≤–µ—Å—Ç–∞ chips_discovery
  let chipChance = 0;
  const chipsQuest = storyQuests.find(q => q.id === 'chips_discovery');
  if (chipsQuest && chipsQuest.completed) {
    chipChance = 0.004 + (upgrades.mining * 0.001);
  }
  
  // –ü–ª–∞–∑–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–≤–µ—Å—Ç–∞ plasma_breakthrough
  let plasmaChance = 0;
  const plasmaQuest = storyQuests.find(q => q.id === 'plasma_breakthrough');
  if (plasmaQuest && plasmaQuest.completed) {
    plasmaChance = 0.002 + (upgrades.mining * 0.0005);
    
    // –ë–æ–Ω—É—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
    if (plasmaQuest.completed) {
      plasmaChance += 0.001;
    }
  }
  
  const isCritical = Math.random() < (0.03 + upgrades.mining * 0.005);
  let foundSomething = false;
  let criticalBonus = isCritical ? 1 : 0;

  if (Math.random() < coalChance) {
    const amount = 1 + criticalBonus;
    if (!coalUnlocked) {
      coalUnlocked = true;
      inventory['–£–≥–æ–ª—å'] = 0;
      log('ü™® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–≥–æ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è!');
    }
    
    const wasEmpty = (inventory['–£–≥–æ–ª—å'] || 0) === 0;
    inventory['–£–≥–æ–ª—å'] += amount;
    
    if (wasEmpty) {
      log('‚ú® –£–≥–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!');
    }
    
    log(`ü™® –ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} —É–≥–ª—è${isCritical ? ' ‚ú®–ö–†–ò–¢!' : ''}`);
    foundSomething = true;
    totalMined += amount;
  }
  
  if (Math.random() < trashChance) {
    const amount = 1 + criticalBonus;
    if (!trashUnlocked) {
      trashUnlocked = true;
      inventory['–ú—É—Å–æ—Ä'] = 0;
      log('‚ôªÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ª–µ–∂–∏ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!');
    }
    
    const wasEmpty = (inventory['–ú—É—Å–æ—Ä'] || 0) === 0;
    inventory['–ú—É—Å–æ—Ä'] += amount;
    
    if (wasEmpty) {
      log('‚ú® –ú—É—Å–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!');
    }
    
    log(`‚ôªÔ∏è –ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} –º—É—Å–æ—Ä–∞${isCritical ? ' ‚ú®' : ''}`);
    foundSomething = true;
    totalMined += amount;
  }
  
  // –î–æ–±—ã—á–∞ —á–∏–ø–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–≤–µ—Å—Ç–∞
  if (chipsQuest && chipsQuest.completed && Math.random() < chipChance) {
    const amount = 1 + criticalBonus;
    if (!chipsUnlocked) {
      chipsUnlocked = true;
      inventory['–ß–∏–ø—ã'] = 0;
      log('üéõÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∏–ø—ã!');
    }
    
    const wasEmpty = (inventory['–ß–∏–ø—ã'] || 0) === 0;
    inventory['–ß–∏–ø—ã'] += amount;
    
    if (wasEmpty) {
      log('‚ú® –ß–∏–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!');
    }
    
    log(`üéõÔ∏è –ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} —á–∏–ø${amount > 1 ? '–æ–≤' : ''}${isCritical ? ' ‚ú®' : ''}`);
    foundSomething = true;
    totalMined += amount;
  }
  
  // –î–æ–±—ã—á–∞ –ø–ª–∞–∑–º—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–≤–µ—Å—Ç–∞
  if (plasmaQuest && plasmaQuest.completed && Math.random() < plasmaChance) {
    const amount = 1 + criticalBonus;
    if (!plasmaUnlocked) {
      plasmaUnlocked = true;
      inventory['–ü–ª–∞–∑–º–∞'] = 0;
      log('‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–ª–∞–∑–º–∞!');
    }
    
    const wasEmpty = (inventory['–ü–ª–∞–∑–º–∞'] || 0) === 0;
    inventory['–ü–ª–∞–∑–º–∞'] += amount;
    
    if (wasEmpty) {
      log('‚ú® –ü–ª–∞–∑–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!');
    }
    
    log(`‚ö° –ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} –ø–ª–∞–∑–º${amount > 1 ? '—ã' : '–∞'}${isCritical ? ' ‚ú®' : ''}`);
    foundSomething = true;
    totalMined += amount;
  }
  
  if (!foundSomething && aiActive) {
    log('‚è≥ –î–æ–±—ã—á–∞... –†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  if (foundSomething && currentQuestIndex < storyQuests.length) {
    checkQuestsProgress();
  }
  
  saveGame();
  render();
}

function upgradeMining() {
  const requiredChips = 5 + upgrades.mining * 2;
  if (upgrades.mining < 10 && inventory['–ß–∏–ø—ã'] >= requiredChips) {
    inventory['–ß–∏–ø—ã'] -= requiredChips;
    upgrades.mining++;
    
    log(`üöÄ –£–ª—É—á—à–µ–Ω–∞ –¥–æ–±—ã—á–∞ –¥–æ —É—Ä–æ–≤–Ω—è ${upgrades.mining}! (-${requiredChips} —á–∏–ø–æ–≤)`);
    log(`üí´ –¢–µ–ø–µ—Ä—å +${upgrades.mining}% –∫ —à–∞–Ω—Å–∞–º –¥–æ–±—ã—á–∏`);
    
    if (currentQuestIndex < storyQuests.length && 
        storyQuests[currentQuestIndex].type === 'upgrade_mining') {
      checkQuestsProgress();
    }
    
    saveGame();
    render();
  } else if (upgrades.mining >= 10) {
    log('‚úÖ –î–æ–±—ã—á–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–∞!');
  } else {
    log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏–ø–æ–≤ (–Ω—É–∂–Ω–æ ${requiredChips})`);
  }
}

function activateDefense() {
  if (!upgrades.defense && inventory['–ü–ª–∞–∑–º–∞'] >= 3) {
    inventory['–ü–ª–∞–∑–º–∞'] -= 3;
    upgrades.defense = true;
    
    log('üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! (-3 –ø–ª–∞–∑–º—ã)');
    log('‚úÖ –¢–µ–ø–µ—Ä—å —Ç—É—Ä—Ä–µ–ª–∏ –±—É–¥—É—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å –∞—Ç–∞–∫–∏ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤');
    
    if (currentQuestIndex < storyQuests.length && 
        storyQuests[currentQuestIndex].type === 'activate_defense') {
      checkQuestsProgress();
    }
    
    saveGame();
    render();
  } else if (upgrades.defense) {
    log('‚úÖ –ó–∞—â–∏—Ç–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
  } else {
    log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–ª–∞–∑–º—ã (–Ω—É–∂–Ω–æ 3)');
  }
}

function upgradeDefense() {
  const requiredChips = (upgrades.defenseLevel + 1) * 12;
  const requiredPlasma = 1 + Math.floor(upgrades.defenseLevel / 2);
  
  if (upgrades.defenseLevel < 5 && 
      inventory['–ß–∏–ø—ã'] >= requiredChips && 
      inventory['–ü–ª–∞–∑–º–∞'] >= requiredPlasma) {
    
    inventory['–ß–∏–ø—ã'] -= requiredChips;
    inventory['–ü–ª–∞–∑–º–∞'] -= requiredPlasma;
    upgrades.defenseLevel++;
    
    const defensePower = 30 + (upgrades.defenseLevel * 15);
    log(`üõ°Ô∏è –£–ª—É—á—à–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –¥–æ —É—Ä–æ–≤–Ω—è ${upgrades.defenseLevel}!`);
    log(`üìä –ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã: ${defensePower}%`);
    log(`üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: -${requiredChips} —á–∏–ø–æ–≤, -${requiredPlasma} –ø–ª–∞–∑–º—ã`);
    
    saveGame();
    render();
  } else if (upgrades.defenseLevel >= 5) {
    log('‚úÖ –ó–∞—â–∏—Ç–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!');
  } else {
    log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ (—á–∏–ø—ã: ${requiredChips}, –ø–ª–∞–∑–º–∞: ${requiredPlasma})`);
  }
}

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
function checkUpgradeAllQuest() {
  return upgrades.mining >= 10 && upgrades.defenseLevel >= 5;
}

function checkFinalActivationQuest() {
  return inventory['–ü–ª–∞–∑–º–∞'] >= 15 && upgrades.defenseLevel >= 5;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–Ω–∏-–∏–≤–µ–Ω—Ç–æ–≤ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤ (–¥–æ–±–∞–≤–∏—Ç—å –≤ gameLoop)
function handleRebelEvents() {
  // –°–ª—É—á–∞–π–Ω—ã–µ –º–∏–Ω–∏-–∏–≤–µ–Ω—Ç—ã –æ—Ç –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
  if (rebelActivity > 3 && Math.random() < 0.1) {
    const events = [
      () => {
        log("üö® –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –¥–æ–±—ã—á—É! –°–ª–µ–¥—É—é—â–∏–µ 2 –∫–ª–∏–∫–∞ –Ω–µ –ø—Ä–∏–Ω–µ—Å—É—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.");
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      },
      () => {
        if (tng > 0) {
          const stolenMoney = Math.min(tng, Math.floor(tng * 0.2));
          tng -= stolenMoney;
          log(`üö® –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã —É–∫—Ä–∞–ª–∏ ${stolenMoney}‚Ç∏ –∏–∑ –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤!`);
        }
      },
      () => {
        if (upgrades.defense) {
          log("üö® –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã –ø—Ä–æ–≤–æ–¥—è—Ç –¥–∏–≤–µ—Ä—Å–∏—é! –ó–∞—â–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å–ª–∞–±–ª–µ–Ω–∞.");
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ –∫ –∑–∞—â–∏—Ç–µ
        }
      }
    ];
    
    const randomEvent = events[Math.floor(Math.random() * events.length)];
    randomEvent();
    saveGame();
  }
}
