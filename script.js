// CoreBox ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–∫—Ä–∏–ø—Ç

const STORAGE_KEY = 'coreboxSave';
let lastSavedState = '';
let lastRenderState = '';
let lastSaveTime = 0;

// –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
const inventory = {
  '–ò–ò': 1,
  '–£–≥–æ–ª—å': 5,
  '–ú—É—Å–æ—Ä': 0,
  '–ö—Ä–∏—Å—Ç–∞–ª–ª': 0
};

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
let tng = 0;
const maxSlots = 9;
let coalEnabled = false; // –í–∫–ª—é—á—ë–Ω –ª–∏ —É–≥–æ–ª—å
let gameTime = 15;
let isDay = true;
let aiActive = true;
let passiveTick = 0;

// UI —ç–ª–µ–º–µ–Ω—Ç—ã
const inventoryEl = document.getElementById('inventory');
const aiSlot = document.getElementById('aiSlot');
const timeDisplay = document.getElementById('timeDisplay');
const currencyDisplay = document.getElementById('currencyDisplay');
const logBox = document.getElementById('logBox');

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
function renderInventory() {
  inventoryEl.innerHTML = '';
  Object.entries(inventory).forEach(([item, count]) => {
    const cell = document.createElement('div');
    cell.className = 'item-cell';
    cell.textContent = `${item}: ${count}`;

    // –ö–ª–∏–∫ –Ω–∞ —è—á–µ–π–∫—É "–£–≥–æ–ª—å" ‚Äî –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç
    if (item === '–£–≥–æ–ª—å') {
      cell.style.cursor = 'pointer';
      cell.addEventListener('click', () => {
        if (coalEnabled) {
          coalEnabled = false;
          log('–£–≥–æ–ª—å –≤—ã–∫–ª—é—á–µ–Ω.');
        } else if (inventory['–£–≥–æ–ª—å'] > 0) {
          coalEnabled = true;
          inventory['–£–≥–æ–ª—å']--;
          log('–£–≥–æ–ª—å –≤–∫–ª—é—á–µ–Ω. -1 —É–≥–æ–ª—å');
        } else {
          log('–ù–µ—Ç —É–≥–ª—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.');
        }
        renderInventory();
      });
    }

    inventoryEl.appendChild(cell);
  });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ò–ò —Å–æ—Å—Ç–æ—è–Ω–∏—è
function renderAIState() {
  aiSlot.textContent = aiActive ? 'ü§ñ –ò–ò –∞–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
}

// –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
function log(msg) {
  const line = document.createElement('div');
  line.textContent = `> ${msg}`;
  logBox.appendChild(line);
  logBox.scrollTop = logBox.scrollHeight;
}

// –ü–∞—Å—Å–∏–≤–Ω–∞—è –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
function passiveMine() {
  if (!aiActive) return;
  const chance = Math.random();
  if (chance < 0.01) {
    inventory['–ú—É—Å–æ—Ä']++;
    log('–ü–∞—Å—Å–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω –º—É—Å–æ—Ä.');
    renderInventory();
  }
}

// –°–º–µ–Ω–∞ –¥–Ω—è –∏ –Ω–æ—á–∏
function toggleDayNight() {
  isDay = !isDay;
  timeDisplay.textContent = isDay ? '‚è∞ –î–µ–Ω—å' : 'üåô –ù–æ—á—å';
  if (!isDay && coalEnabled) {
    if (inventory['–£–≥–æ–ª—å'] > 0) {
      inventory['–£–≥–æ–ª—å']--;
      log('–ù–æ—á—å: —É–≥–æ–ª—å —Å–≥–æ—Ä–µ–ª. -1');
    } else {
      coalEnabled = false;
      log('–£–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤—ã–∫–ª—é—á–µ–Ω.');
    }
  }
  updateAIState();
  renderInventory();
  renderAIState();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ò–ò
function updateAIState() {
  if (isDay) {
    aiActive = true;
  } else {
    aiActive = coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0;
  }
}

// –ê–∫—Ç–∏–≤–Ω–∞—è –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
function mineResources() {
  if (!aiActive) {
    log('–ò–ò –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –¥–æ–±—ã—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
    return;
  }

  const roll = Math.random();
  let success = false;

  if (coalEnabled && roll < 0.07) {
    inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª']++;
    log('–ù–∞–π–¥–µ–Ω –ö—Ä–∏—Å—Ç–∞–ª–ª (—É–≥–æ–ª—å –∞–∫—Ç–∏–≤–µ–Ω, —à–∞–Ω—Å 7%).');
    success = true;
  } else if (isDay && !coalEnabled && roll < 0.04) {
    inventory['–ú—É—Å–æ—Ä']++;
    log('–ù–∞–π–¥–µ–Ω –ú—É—Å–æ—Ä (–¥–µ–Ω—å, —à–∞–Ω—Å 4%).');
    success = true;
  }

  if (!success) {
    log('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
  }

  renderInventory();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
function saveGame() {
  const state = JSON.stringify({ inventory, tng });
  localStorage.setItem(STORAGE_KEY, state);
  lastSaveTime = Date.now();
}

function loadGame() {
  const saved = localStorage.getItem(STORAGE_KEY);
  if (saved) {
    const data = JSON.parse(saved);
    Object.assign(inventory, data.inventory);
    tng = data.tng;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
setInterval(() => {
  gameTime--;
  if (gameTime <= 0) {
    gameTime = 15;
    toggleDayNight();
  }
  passiveTick++;
  if (passiveTick >= 7) {
    passiveTick = 0;
    passiveMine();
  }
  currencyDisplay.textContent = `TNG: ${tng}‚Ç∏`;
}, 1000);

// –ö–Ω–æ–ø–∫–∏

document.getElementById('mineBtn').addEventListener('click', mineResources);

// –°—Ç–∞—Ä—Ç
loadGame();
renderInventory();
renderAIState();
