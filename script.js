const STORAGE_KEY = 'coreboxSave';
let adsManager;
let lastSavedState = '';
let lastRenderState = '';

const inventory = { '–ò–ò': 1, '–£–≥–æ–ª—å': 0, '–ú—É—Å–æ—Ä': 0, '–ö—Ä–∏—Å—Ç–∞–ª–ª': 0 };
let tng = 0;
const maxSlots = 9;
let coalEnabled = false;
let gameTime = 15;
let isDay = true;
let passiveCounter = 0;
let sellMode = false;
let currentQuest = null;
let questCompleted = false;
let crystalFoundToday = false;
const questResources = ['–ö—Ä–∏—Å—Ç–∞–ª–ª'];

const leftPanelItems = ['–¢–≠–¶', '', '', '', ''];
const rightPanelItems = ['', '', '', '', ''];

function log(message) {
  const box = document.getElementById('logBox');
  const entries = box.innerHTML.split('<br>');
  
  if (entries.length > 100) {
    entries.shift();
  }
  
  box.innerHTML = entries.join('<br>') + `üü¢ ${message}<br>`;
  box.scrollTop = box.scrollHeight;
}

function updateTimeDisplay() {
  const icon = isDay ? 'üåû' : 'üåô';
  document.getElementById('timeDisplay').innerText = `${icon} ${isDay ? '–î–µ–Ω—å' : '–ù–æ—á—å'} ‚Äî ${Math.ceil(gameTime)}s –æ—Å—Ç–∞–ª–æ—Å—å`;
}

function updateCurrencyDisplay() {
  document.getElementById('currencyDisplay').innerText = `TNG: ${tng}‚Ç∏`;
}

function generateNewQuest() {
  try {
    const randomResource = questResources[Math.floor(Math.random() * questResources.length)];
    currentQuest = {
      resource: randomResource,
      amount: 1,
      reward: 2000
    };
    questCompleted = false;
    crystalFoundToday = false;
    log(`üìú –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç: –¥–æ–±—ã—Ç—å ${currentQuest.resource}! –ù–∞–≥—Ä–∞–¥–∞: ${currentQuest.reward}‚Ç∏`);
    document.getElementById('questInfo').textContent = `üìå –ö–≤–µ—Å—Ç: ${currentQuest.resource} (${currentQuest.reward}‚Ç∏)`;
    saveGame();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
    currentQuest = {
      resource: '–ö—Ä–∏—Å—Ç–∞–ª–ª',
      amount: 1,
      reward: 2000
    };
  }
}

function checkQuest(resource) {
  if (!currentQuest || questCompleted) return;
  
  if (resource === currentQuest.resource) {
    questCompleted = true;
    tng += currentQuest.reward;
    log(`üéâ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${currentQuest.reward}‚Ç∏`);
    updateCurrencyDisplay();
    setTimeout(generateNewQuest, 2000);
    saveGame();
  }
}

function addToInventory(resource, amount = 1) {
  if (!inventory.hasOwnProperty(resource)) {
    console.error('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å:', resource);
    return false;
  }
  
  inventory[resource] = Math.max(0, (inventory[resource] || 0) + amount);
  saveGame();
  return true;
}

function saveGame() {
  const saveData = {
    inventory,
    tng,
    coalEnabled,
    gameTime,
    isDay,
    passiveCounter,
    sellMode,
    currentQuest,
    questCompleted,
    crystalFoundToday,
    advertisements: (adsManager && typeof adsManager.getAdsData === 'function') ? adsManager.getAdsData() : [],
    lastUpdate: Date.now()
  };
  
  const currentState = JSON.stringify(saveData);
  if (currentState !== lastSavedState) {
    localStorage.setItem(STORAGE_KEY, currentState);
    lastSavedState = currentState;
  }
}

function loadGame() {
  const saved = localStorage.getItem(STORAGE_KEY);
  if (saved) {
    try {
      const data = JSON.parse(saved);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      if (data.inventory) {
        Object.keys(inventory).forEach(key => {
          if (data.inventory[key] !== undefined) {
            inventory[key] = data.inventory[key];
          }
        });
      }
      
      tng = typeof data.tng === 'number' ? data.tng : 0;
      coalEnabled = !!data.coalEnabled;
      gameTime = typeof data.gameTime === 'number' ? data.gameTime : 15;
      isDay = !!data.isDay;
      passiveCounter = typeof data.passiveCounter === 'number' ? data.passiveCounter : 0;
      sellMode = !!data.sellMode;
      currentQuest = data.currentQuest || null;
      questCompleted = !!data.questCompleted;
      crystalFoundToday = !!data.crystalFoundToday;
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      if (data.lastUpdate) {
        const secondsPassed = Math.floor((Date.now() - data.lastUpdate) / 1000);
        const fullCycles = Math.floor(secondsPassed / 30);
        
        for (let i = 0; i < fullCycles; i++) {
          isDay = !isDay;
          crystalFoundToday = false;
        }
        
        gameTime = data.gameTime - (secondsPassed % 30);
        if (gameTime <= 0) {
          gameTime += 15;
          isDay = !isDay;
          crystalFoundToday = false;
        }
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      adsManager = new AdsManager({
        tng: tng,
        log: log,
        updateCurrencyDisplay: updateCurrencyDisplay,
        saveGame: saveGame
      });
      
      if (Array.isArray(data.advertisements)) {
        adsManager.loadAds(data.advertisements);
      }
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–µ—Å—Ç–µ
      if (currentQuest) {
        document.getElementById('questInfo').textContent = 
          questCompleted 
            ? 'üîÑ –ö–≤–µ—Å—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...' 
            : `üìå –ö–≤–µ—Å—Ç: ${currentQuest.resource} (${currentQuest.reward}‚Ç∏)`;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      resetGame();
    }
  }
  
  if (!currentQuest) {
    generateNewQuest();
  }
}

function resetGame() {
  Object.keys(inventory).forEach(key => inventory[key] = 0);
  inventory['–ò–ò'] = 1;
  tng = 0;
  coalEnabled = false;
  gameTime = 15;
  isDay = true;
  passiveCounter = 0;
  sellMode = false;
  currentQuest = null;
  questCompleted = false;
  crystalFoundToday = false;
  saveGame();
}

function handleCoalClick() {
  if (sellMode) return;
  
  if (coalEnabled) {
    coalEnabled = false;
    log('–£–≥–æ–ª—å üî• –≤—ã–∫–ª—é—á–µ–Ω');
  } else if (inventory['–£–≥–æ–ª—å'] > 0) {
    coalEnabled = true;
    addToInventory('–£–≥–æ–ª—å', -1);
    log('–£–≥–æ–ª—å üî• –≤–∫–ª—é—á—ë–Ω (‚àí1)');
  }
  
  render();
}

function handleTrashClick() {
  const count = inventory['–ú—É—Å–æ—Ä'];
  if (count > 0) {
    inventory['–ú—É—Å–æ—Ä'] = 0;
    tng += count;
    log(`–ü—Ä–æ–¥–∞–Ω–æ ${count} –º—É—Å–æ—Ä–∞ –∑–∞ ${count}‚Ç∏`);
    sellMode = false;
    updateCurrencyDisplay();
    saveGame();
    render();
  }
}

function render() {
  const currentState = JSON.stringify(inventory) + tng + isDay + Math.floor(gameTime) + sellMode + coalEnabled;
  if (currentState === lastRenderState) return;
  lastRenderState = currentState;

  const invDiv = document.getElementById('inventory');
  const leftDiv = document.getElementById('leftSlots');
  const rightDiv = document.getElementById('rightSlots');
  const aiSlot = document.getElementById('aiSlot');

  invDiv.innerHTML = '';
  leftDiv.innerHTML = '';
  rightDiv.innerHTML = '';

  let renderedSlots = 0;
  Object.keys(inventory).forEach(name => {
    if (name === '–ò–ò') return;
    if (name === '–ö—Ä–∏—Å—Ç–∞–ª–ª' && inventory[name] === 0) return;

    const slot = document.createElement('div');
    slot.className = 'slot' + (name === '–ö—Ä–∏—Å—Ç–∞–ª–ª' ? ' crystal-slot' : '');
    slot.dataset.resource = name;
    slot.innerHTML = `${name} x${inventory[name]}`;

    if (name === '–ö—Ä–∏—Å—Ç–∞–ª–ª' && inventory[name] > 0) {
      checkQuest('–ö—Ä–∏—Å—Ç–∞–ª–ª');
    }

    if (sellMode && name === '–ú—É—Å–æ—Ä' && inventory[name] > 0) {
      slot.classList.add('sell-mode');
      const sellLabel = document.createElement('div');
      sellLabel.className = 'sell-label';
      sellLabel.innerText = '–ü—Ä–æ–¥–∞—Ç—å';
      slot.appendChild(sellLabel);
      slot.addEventListener('click', handleTrashClick);
    }

    if (name === '–£–≥–æ–ª—å') {
      slot.style.borderColor = coalEnabled ? 'lime' : '#888';
      slot.addEventListener('click', handleCoalClick);
    }

    invDiv.appendChild(slot);
    renderedSlots++;
  });

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
  for (let i = renderedSlots; i < maxSlots; i++) {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = '[–ø—É—Å—Ç–æ]';
    invDiv.appendChild(slot);
  }

  // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
  leftPanelItems.forEach(name => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = name || '[–ø—É—Å—Ç–æ]';
    leftDiv.appendChild(slot);
  });

  // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
  rightPanelItems.forEach(name => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = name || '[–ø—É—Å—Ç–æ]';
    rightDiv.appendChild(slot);
  });

  // –°—Ç–∞—Ç—É—Å –ò–ò
  const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
  aiSlot.innerText = aiActive ? 'ü§ñ –ò–ò –∞–∫—Ç–∏–≤–µ–Ω' : 'üõë –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';

  updateTimeDisplay();
  updateCurrencyDisplay();
}

document.getElementById('mineBtn').addEventListener('click', () => {
  const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
  if (!aiActive || (!isDay && !coalEnabled)) return;
  
  const coalChance = (coalEnabled ? 0.07 : 0.04) / 2;
  const trashChance = (coalEnabled ? 0.02 : 0.01) / 2;
  const crystalChance = (!crystalFoundToday && currentQuest && !questCompleted) ? 0.0167 : 0;

  if (Math.random() < coalChance) {
    addToInventory('–£–≥–æ–ª—å', 1);
    log('–ù–∞–π–¥–µ–Ω —É–≥–æ–ª—å ü™®');
  }
  
  if (Math.random() < trashChance) {
    addToInventory('–ú—É—Å–æ—Ä', 1);
    log('–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
  }
  
  if (Math.random() < crystalChance) {
    addToInventory('–ö—Ä–∏—Å—Ç–∞–ª–ª', 1);
    crystalFoundToday = true;
    log('‚ú® –ù–∞–π–¥–µ–Ω —Ä–µ–¥–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª!');
  }
  
  render();
});

document.getElementById('toggleTrade').addEventListener('click', () => {
  sellMode = !sellMode;
  if (sellMode) {
    log('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–∫–ª—é—á—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º—É—Å–æ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
  } else {
    log('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω.');
  }
  saveGame();
  render();
});

let lastFrameTime = Date.now();

function gameLoop() {
  const currentTime = Date.now();
  const deltaTime = (currentTime - lastFrameTime) / 1000;
  lastFrameTime = currentTime;

  gameTime -= deltaTime;
  
  if (gameTime <= 0) {
    gameTime = 15;
    isDay = !isDay;
    crystalFoundToday = false;
    
    if (!isDay && coalEnabled) {
      if (inventory['–£–≥–æ–ª—å'] > 0) {
        addToInventory('–£–≥–æ–ª—å', -1);
        log('–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô ‚Äî —Å–≥–æ—Ä–µ–ª 1 —É–≥–æ–ª—å');
      } else {
        coalEnabled = false;
        log('–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô ‚Äî —É–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ò–ò –æ—Ç–∫–ª—é—á—ë–Ω');
      }
    } else {
      log(isDay ? '–ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å üåû' : '–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô');
    }
    
    saveGame();
  }

  // –ü–∞—Å—Å–∏–≤–Ω–æ–µ –¥–æ–±—ã–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  if (passiveCounter >= 7) {
    passiveCounter = 0;
    const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
    
    if (aiActive) {
      const coalChance = coalEnabled ? 0.01 : 0.005;
      const trashChance = coalEnabled ? 0.01 : 0.005;
      
      if (Math.random() < coalChance) {
        addToInventory('–£–≥–æ–ª—å', 1);
        log('–ü–∞—Å—Å–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω —É–≥–æ–ª—å ü™®');
      }
      
      if (Math.random() < trashChance) {
        addToInventory('–ú—É—Å–æ—Ä', 1);
        log('–ü–∞—Å—Å–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
      }
    }
  } else {
    passiveCounter += deltaTime;
  }

  render();
  requestAnimationFrame(gameLoop);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
if (!adsManager) {
  adsManager = new AdsManager({
    tng: tng,
    log: log,
    updateCurrencyDisplay: updateCurrencyDisplay,
    saveGame: saveGame
  });
}

loadGame();
gameLoop();