// –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const STORAGE_KEY = 'coreboxSave2';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const inventory = { 
  '–ò–ò': 1, 
  '–£–≥–æ–ª—å': 0, 
  '–ú—É—Å–æ—Ä': 0,
  '–ß–∏–ø—ã': 0,
  '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': 0
};

const upgrades = {
  mining: 0,
  autoSell: false
};

let gameState = {
  tng: 0,
  coalEnabled: false,
  gameTime: 15,
  isDay: true,
  passiveCounter: 0,
  sellMode: false,
  recycleMode: false,
  trashSold: 0,
  insuranceDays: 0,
  criticalMining: false
};

const leftPanelItems = ['–¢–≠–¶', '', '', '', ''];
const rightPanelItems = ['–ü–µ—Ä–µ—Ä–∞–±–æ—Ç—á–∏–∫', '', '', '', ''];

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä—ã
function log(message) {
  const box = document.getElementById('logBox');
  box.innerHTML += `üü¢ ${message}<br>`;
  box.scrollTop = box.scrollHeight;
}

function updateTimeDisplay() {
  const icon = gameState.isDay ? 'üåû' : 'üåô';
  document.getElementById('timeDisplay').innerText = `${icon} ${gameState.isDay ? '–î–µ–Ω—å' : '–ù–æ—á—å'} ‚Äî ${gameState.gameTime}s`;
}

function updateCurrencyDisplay() {
  document.getElementById('currencyDisplay').innerText = `TNG: ${gameState.tng}‚Ç∏`;
}

function saveGame() {
  const saveData = {
    inventory,
    tng: gameState.tng,
    coalEnabled: gameState.coalEnabled,
    gameTime: gameState.gameTime,
    isDay: gameState.isDay,
    passiveCounter: gameState.passiveCounter,
    sellMode: gameState.sellMode,
    recycleMode: gameState.recycleMode,
    trashSold: gameState.trashSold,
    insuranceDays: gameState.insuranceDays,
    upgrades
  };
  localStorage.setItem(STORAGE_KEY, JSON.stringify(saveData));
}

function loadGame() {
  const saved = localStorage.getItem(STORAGE_KEY);
  if (saved) {
    try {
      const data = JSON.parse(saved);
      Object.keys(inventory).forEach(key => {
        if (data.inventory[key] !== undefined) inventory[key] = data.inventory[key];
      });
      gameState.tng = data.tng ?? 0;
      gameState.coalEnabled = data.coalEnabled ?? false;
      gameState.gameTime = data.gameTime ?? 15;
      gameState.isDay = data.isDay ?? true;
      gameState.passiveCounter = data.passiveCounter ?? 0;
      gameState.sellMode = data.sellMode ?? false;
      gameState.recycleMode = data.recycleMode ?? false;
      gameState.trashSold = data.trashSold ?? 0;
      gameState.insuranceDays = data.insuranceDays ?? 0;
      upgrades.mining = data.upgrades?.mining ?? 0;
      upgrades.autoSell = data.upgrades?.autoSell ?? false;
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', e);
    }
  }
}

function calculateTrashPrice() {
  const basePrice = 1;
  const priceDrop = Math.floor(gameState.trashSold / 5) * 0.05;
  return Math.max(basePrice - priceDrop, 0.3);
}

function render() {
  const invDiv = document.getElementById('inventory');
  const leftDiv = document.getElementById('leftSlots');
  const rightDiv = document.getElementById('rightSlots');
  const aiSlot = document.getElementById('aiSlot');
  const mineBtn = document.getElementById('mineBtn');

  document.getElementById('miningBonus').textContent = upgrades.mining;

  invDiv.innerHTML = '';
  leftDiv.innerHTML = '';
  rightDiv.innerHTML = '';

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  Object.entries(inventory).forEach(([name, count]) => {
    if (name === '–ò–ò') return;
    
    const slot = document.createElement('div');
    slot.className = 'slot';
    if (gameState.criticalMining && (name === '–£–≥–æ–ª—å' || name === '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')) {
      slot.classList.add('critical');
      gameState.criticalMining = false;
    }
    
    slot.textContent = `${name} x${count}`;

    if (name === '–£–≥–æ–ª—å' || name === '–ú—É—Å–æ—Ä') {
      const bonusDiv = document.createElement('div');
      bonusDiv.className = 'mining-bonus';
      const baseChance = name === '–£–≥–æ–ª—å' ? 3 : 1.5;
      const totalBonus = upgrades.mining + (gameState.coalEnabled ? (name === '–£–≥–æ–ª—å' ? 2 : 1) : 0);
      bonusDiv.textContent = `+${baseChance + totalBonus}%`;
      slot.appendChild(bonusDiv);
    }

    if (gameState.sellMode && name === '–ú—É—Å–æ—Ä') {
      slot.classList.add('sell-mode');
      const sellLabel = document.createElement('div');
      sellLabel.className = 'sell-label';
      sellLabel.textContent = count > 0 ? `–ü—Ä–æ–¥–∞—Ç—å (${calculateTrashPrice().toFixed(1)}‚Ç∏)` : '–ù–µ—Ç –º—É—Å–æ—Ä–∞';
      slot.appendChild(sellLabel);
      
      slot.onclick = () => {
        if (inventory['–ú—É—Å–æ—Ä'] > 0) {
          const price = calculateTrashPrice();
          gameState.tng += Math.floor(inventory['–ú—É—Å–æ—Ä'] * price);
          gameState.trashSold += inventory['–ú—É—Å–æ—Ä'];
          log(`–ü—Ä–æ–¥–∞–Ω–æ ${inventory['–ú—É—Å–æ—Ä']} –º—É—Å–æ—Ä–∞ +${Math.floor(inventory['–ú—É—Å–æ—Ä'] * price)}‚Ç∏`);
          inventory['–ú—É—Å–æ—Ä'] = 0;
          updateCurrencyDisplay();
          saveGame();
          render();
        }
      };
    } 
    else if (gameState.recycleMode && name === '–ú—É—Å–æ—Ä') {
      slot.classList.add('recycle-mode');
      const recycleLabel = document.createElement('div');
      recycleLabel.className = 'recycle-label';
      recycleLabel.textContent = count >= 5 ? '5‚Üí1 —É–≥–æ–ª—å' : '–ù—É–∂–Ω–æ 5';
      slot.appendChild(recycleLabel);
      
      slot.onclick = () => {
        if (inventory['–ú—É—Å–æ—Ä'] >= 5) {
          inventory['–ú—É—Å–æ—Ä'] -= 5;
          inventory['–£–≥–æ–ª—å']++;
          log('–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ 5 –º—É—Å–æ—Ä–∞ ‚Üí 1 —É–≥–æ–ª—å');
          saveGame();
          render();
        }
      };
    }
    else if (name === '–£–≥–æ–ª—å') {
      if (gameState.coalEnabled) {
        slot.style.borderColor = 'gold';
        slot.style.boxShadow = '0 0 8px gold';
      }
      
      slot.onclick = () => {
        if (gameState.sellMode && gameState.isDay) {
          if (inventory['–£–≥–æ–ª—å'] > 0) {
            inventory['–£–≥–æ–ª—å']--;
            gameState.tng += 3;
            gameState.coalEnabled = false;
            log('–ü—Ä–æ–¥–∞–Ω–æ 1 —É–≥–æ–ª—å +3‚Ç∏ (–¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞)');
            updateCurrencyDisplay();
            saveGame();
            render();
          }
        } 
        else if (!gameState.sellMode && !gameState.recycleMode) {
          if (!gameState.coalEnabled) {
            if (inventory['–£–≥–æ–ª—å'] > 0) {
              gameState.coalEnabled = true;
              inventory['–£–≥–æ–ª—å']--;
              log('–£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (-1 —É–≥–æ–ª—å)');
            } else {
              log('–ù–µ—Ç —É–≥–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!');
            }
          } else {
            gameState.coalEnabled = false;
            log('–£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
          }
          saveGame();
          render();
        }
      };
    }
    else if (name === '–ß–∏–ø—ã' && count > 0) {
      slot.classList.add('upgrade');
      slot.onclick = () => {
        if (upgrades.mining < 10 && inventory['–ß–∏–ø—ã'] >= 5) {
          inventory['–ß–∏–ø—ã'] -= 5;
          upgrades.mining++;
          log(`–ê–ø–≥—Ä–µ–π–¥ –¥–æ–±—ã—á–∏! –¢–µ–ø–µ—Ä—å +${upgrades.mining}% –∫ —à–∞–Ω—Å–∞–º`);
          saveGame();
          render();
        } else if (!upgrades.autoSell && inventory['–ß–∏–ø—ã'] >= 20) {
          inventory['–ß–∏–ø—ã'] -= 20;
          upgrades.autoSell = true;
          log('–ê–ø–≥—Ä–µ–π–¥: –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ –º—É—Å–æ—Ä–∞!');
          saveGame();
          render();
        }
      };
    }

    invDiv.appendChild(slot);
  });

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
  while (invDiv.children.length < 9) {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.textContent = '[–ø—É—Å—Ç–æ]';
    invDiv.appendChild(slot);
  }

  // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–¢–≠–¶)
  leftPanelItems.forEach((name, index) => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    if (index === 0) {
      slot.textContent = gameState.coalEnabled ? '–¢–≠–¶ üî•' : '–¢–≠–¶';
      if (gameState.coalEnabled) {
        slot.style.borderColor = 'gold';
        slot.style.boxShadow = '0 0 8px gold';
      }
    } else {
      slot.textContent = name || '[–ø—É—Å—Ç–æ]';
    }
    leftDiv.appendChild(slot);
  });

  // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–ü–µ—Ä–µ—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –∞–ø–≥—Ä–µ–π–¥—ã)
  rightPanelItems.forEach((name, index) => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    if (index === 0) {
      slot.textContent = '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç—á–∏–∫';
    } else if (index === 4) {
      slot.textContent = '–ê–ø–≥—Ä–µ–π–¥—ã';
      const progress = document.createElement('div');
      progress.className = 'progress-bar';
      const fill = document.createElement('div');
      fill.className = 'progress-fill';
      fill.style.width = `${upgrades.mining * 10}%`;
      progress.appendChild(fill);
      slot.appendChild(document.createTextNode(`–î–æ–±—ã—á–∞ +${upgrades.mining}%`));
      slot.appendChild(progress);
      if (upgrades.autoSell) {
        slot.appendChild(document.createTextNode('–ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ ‚úÖ'));
      }
      
      // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–ø–≥—Ä–µ–π–¥–æ–≤
      const upgradeContainer = document.createElement('div');
      upgradeContainer.className = 'upgrade-container';
      
      for (let i = 0; i < 10; i++) {
        const icon = document.createElement('div');
        icon.className = 'upgrade-icon';
        icon.textContent = i < upgrades.mining ? '‚úì' : '';
        upgradeContainer.appendChild(icon);
      }
      
      slot.appendChild(upgradeContainer);
    } else {
      slot.textContent = name || '[–ø—É—Å—Ç–æ]';
    }
    rightDiv.appendChild(slot);
  });

  // –°—Ç–∞—Ç—É—Å –ò–ò
  const aiActive = gameState.isDay || (gameState.coalEnabled && inventory['–£–≥–æ–ª—å'] > 0);
  aiSlot.textContent = aiActive ? 'ü§ñ –ò–ò –∞–∫—Ç–∏–≤–µ–Ω' : 'üõë –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
  aiSlot.style.color = aiActive ? 'lime' : 'red';
  
  if (gameState.insuranceDays > 0) {
    aiSlot.textContent += ` (–°—Ç—Ä–∞—Ö–æ–≤–∫–∞: ${gameState.insuranceDays}–¥)`;
  }

  updateTimeDisplay();
  updateCurrencyDisplay();
}

function mineResources() {
  const aiActive = gameState.isDay || (gameState.coalEnabled && inventory['–£–≥–æ–ª—å'] > 0);
  if (!aiActive) {
    log('‚ùå –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ù—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è');
    return;
  }
  
  const coalChance = 0.03 + (gameState.coalEnabled ? 0.02 : 0) + (upgrades.mining * 0.01);
  const trashChance = 0.015 + (gameState.coalEnabled ? 0.01 : 0) + (upgrades.mining * 0.01);
  const chipChance = 0.01;
  const isCritical = Math.random() < 0.1;

  if (Math.random() < coalChance) {
    const amount = isCritical ? 2 : 1;
    inventory['–£–≥–æ–ª—å'] += amount;
    gameState.criticalMining = isCritical;
    log(`–ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} —É–≥–ª—è ü™®${isCritical ? ' ‚ú®' : ''}`);
  }
  if (Math.random() < trashChance) {
    inventory['–ú—É—Å–æ—Ä']++;
    log('–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
  }
  if (Math.random() < chipChance) {
    inventory['–ß–∏–ø—ã']++;
    gameState.criticalMining = true;
    log('–ù–∞–π–¥–µ–Ω —á–∏–ø üéõÔ∏è‚ú®');
  }
  if (isCritical && Math.random() < 0.3) {
    inventory['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞']++;
    log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–±—ã—á–∞: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ üíæ‚ú®');
  }
  
  if (upgrades.autoSell && inventory['–ú—É—Å–æ—Ä'] > 0) {
    const price = calculateTrashPrice() * 0.5;
    gameState.tng += Math.floor(inventory['–ú—É—Å–æ—Ä'] * price);
    gameState.trashSold += inventory['–ú—É—Å–æ—Ä'];
    log(`–ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞: ${inventory['–ú—É—Å–æ—Ä']} –º—É—Å–æ—Ä–∞ +${Math.floor(inventory['–ú—É—Å–æ—Ä'] * price)}‚Ç∏`);
    inventory['–ú—É—Å–æ—Ä'] = 0;
    updateCurrencyDisplay();
  }
  
  saveGame();
  render();
}

function toggleTradeMode() {
  gameState.sellMode = !gameState.sellMode;
  if (gameState.sellMode) gameState.recycleMode = false;
  log(gameState.sellMode ? '–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–∫–ª—é—á—ë–Ω' : '–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω');
  saveGame();
  render();
}

function toggleRecycleMode() {
  gameState.recycleMode = !gameState.recycleMode;
  if (gameState.recycleMode) gameState.sellMode = false;
  log(gameState.recycleMode ? '–†–µ–∂–∏–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –≤–∫–ª—é—á—ë–Ω' : '–†–µ–∂–∏–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω');
  saveGame();
  render();
}

function handleKeyPress(e) {
  if (e.key === 'i' && gameState.isDay && gameState.tng >= 10) {
    gameState.tng -= 10;
    gameState.insuranceDays += 3;
    log('–ö—É–ø–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ 3 –Ω–æ—á–∏ (-10‚Ç∏)');
    updateCurrencyDisplay();
    saveGame();
    render();
  }
}

function gameLoop() {
  gameState.gameTime--;
  if (gameState.gameTime <= 0) {
    gameState.gameTime = 15;
    gameState.isDay = !gameState.isDay;
    
    if (!gameState.isDay) {
      if (gameState.coalEnabled) {
        if (inventory['–£–≥–æ–ª—å'] > 0) {
          inventory['–£–≥–æ–ª—å']--;
          log('üåô –ù–æ—á—å - —Å–≥–æ—Ä–µ–ª 1 —É–≥–æ–ª—å');
        } else {
          gameState.coalEnabled = false;
          log('üåô –ù–æ—á—å - —É–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        }
      }
      
      if (!gameState.coalEnabled && !gameState.isDay && gameState.insuranceDays === 0 && Math.random() < 0.2) {
        const items = Object.keys(inventory).filter(k => k !== '–ò–ò' && inventory[k] > 0);
        if (items.length > 0) {
          const stolenItem = items[Math.floor(Math.random() * items.length)];
          inventory[stolenItem]--;
          log(`üåô –í–æ—Ä—ã —É–∫—Ä–∞–ª–∏ 1 ${stolenItem}! –ö—É–ø–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –¥–Ω—ë–º.`);
        }
      }
    } else {
      if (gameState.insuranceDays > 0) {
        gameState.insuranceDays--;
        if (gameState.insuranceDays === 0) {
          log('üåû –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å');
        }
      }
      
      if (gameState.insuranceDays === 0 && gameState.tng >= 10 && Math.random() < 0.3) {
        log('–°—Ç—Ä–∞—Ö–æ–≤—â–∏–∫: "–ö—É–ø–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –∑–∞ 10‚Ç∏ (3 –Ω–æ—á–∏)"');
      }
    }
    
    log(gameState.isDay ? 'üåû –ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å' : 'üåô –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å');
    saveGame();
  }

  // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
  gameState.passiveCounter++;
  if (gameState.passiveCounter >= 10) {
    gameState.passiveCounter = 0;
    const aiActive = gameState.isDay || (gameState.coalEnabled && inventory['–£–≥–æ–ª—å'] > 0);
    if (aiActive) {
      const coalChance = 0.003 + (upgrades.mining * 0.001);
      const trashChance = 0.007 + (upgrades.mining * 0.001);
      
      if (Math.random() < coalChance) {
        inventory['–£–≥–æ–ª—å']++;
        log('–ü–∞—Å—Å–∏–≤–Ω–æ: —É–≥–æ–ª—å ü™®');
      }
      if (Math.random() < trashChance) {
        inventory['–ú—É—Å–æ—Ä']++;
        log('–ü–∞—Å—Å–∏–≤–Ω–æ: –º—É—Å–æ—Ä ‚ôªÔ∏è');
      }
      
      if (upgrades.autoSell && inventory['–ú—É—Å–æ—Ä'] > 0) {
        const price = calculateTrashPrice() * 0.5;
        gameState.tng += Math.floor(inventory['–ú—É—Å–æ—Ä'] * price);
        gameState.trashSold += inventory['–ú—É—Å–æ—Ä'];
        log(`–ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞: ${inventory['–ú—É—Å–æ—Ä']} –º—É—Å–æ—Ä–∞ +${Math.floor(inventory['–ú—É—Å–æ—Ä'] * price)}‚Ç∏`);
        inventory['–ú—É—Å–æ—Ä'] = 0;
        updateCurrencyDisplay();
      }
      
      saveGame();
    }
  }

  render();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
window.addEventListener('DOMContentLoaded', () => {
  loadGame();
  render();
  log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CoreBox 2.1!');
  log('–ù–∞–∂–º–∏ "I" –¥–Ω—ë–º —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É (10‚Ç∏)');
  
  document.getElementById('mineBtn').addEventListener('click', mineResources);
  document.getElementById('toggleTrade').addEventListener('click', toggleTradeMode);
  document.getElementById('toggleRecycle').addEventListener('click', toggleRecycleMode);
  document.addEventListener('keydown', handleKeyPress);
  
  setInterval(gameLoop, 1000);
});