const STORAGE_KEY = 'coreboxSave';
let adsManager;
let lastSavedState = '';
let lastRenderState = '';
let lastSaveTime = 0;

const inventory = { 
  '–ò–ò': 1, 
  '–£–≥–æ–ª—å': 0, 
  '–ú—É—Å–æ—Ä': 0, 
  '–ö—Ä–∏—Å—Ç–∞–ª–ª': 0 
};

let tng = 0;
const maxSlots = 9;
let coalEnabled = false;
let gameTime = 15;
let isDay = true;
let passiveCounter = 0;
let sellMode = false;
let currentQuest = null;
let questCompleted = false;
let crystalCooldown = 0;
const CRYSTAL_COOLDOWN = 3 * 60 * 60;
const CRYSTAL_GOAL = 10;
const CRYSTAL_REWARD = 10;
const questResources = ['–ö—Ä–∏—Å—Ç–∞–ª–ª'];

const SOLAR_ENERGY_CHANCES = {
  COAL: 0.03,
  TRASH: 0.01,
  CRYSTAL: 0.015
};

const COAL_ENERGY_CHANCES = {
  COAL: 0.06,
  TRASH: 0.02,
  CRYSTAL: 0.02
};

const leftPanelItems = ['–¢–≠–¶', '', '', '', ''];
const rightPanelItems = ['', '', '', '', ''];

function log(message) {
  const box = document.getElementById('logBox');
  const entries = box.innerHTML.split('<br>');
  
  if (entries.length > 100) {
    entries.shift();
  }
  
  box.innerHTML = entries.join('<br>') + `üü¢ ${message}<br>`;
  box.scrollTop = box.scrollHeight;
}

function updateTimeDisplay() {
  const dayIcon = isDay ? 'üåû' : 'üåô';
  const timeLeft = Math.ceil(gameTime);
  document.getElementById('timeDisplay').innerText = 
    `${dayIcon} ${isDay ? '–î–µ–Ω—å' : '–ù–æ—á—å'} ‚Äî ${timeLeft} —Å–µ–∫`;
  
  if (crystalCooldown > 0) {
    const hours = Math.floor(crystalCooldown / 3600);
    const minutes = Math.floor((crystalCooldown % 3600) / 60);
    document.getElementById('crystalInfo').textContent = 
      `‚è≥ –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: ${hours}—á ${minutes}–º`;
  } else {
    document.getElementById('crystalInfo').textContent = 
      `‚ú® –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: ${inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª']}/${CRYSTAL_GOAL}`;
  }
}

function updateCurrencyDisplay() {
  document.getElementById('currencyDisplay').innerText = `TNG: ${tng}‚Ç∏`;
}

function generateNewQuest() {
  const randomIndex = Math.floor(Math.random() * questResources.length);
  const randomResource = questResources[randomIndex];
  currentQuest = {
    resource: randomResource,
    amount: CRYSTAL_GOAL,
    reward: CRYSTAL_REWARD
  };
  questCompleted = false;
  log(`üìú –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç: ${currentQuest.amount} ${currentQuest.resource}! –ù–∞–≥—Ä–∞–¥–∞: ${currentQuest.reward}‚Ç∏`);
  document.getElementById('questInfo').textContent = 
    `üìå –ö–≤–µ—Å—Ç: ${currentQuest.amount} ${currentQuest.resource} (${currentQuest.reward}‚Ç∏)`;
  saveGame();
}

function checkCrystalQuest() {
  if (!currentQuest || questCompleted || crystalCooldown > 0 || currentQuest.resource !== '–ö—Ä–∏—Å—Ç–∞–ª–ª') return;
  
  if (inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª'] >= currentQuest.amount) {
    questCompleted = true;
    tng += currentQuest.reward;
    inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª'] = 0;
    crystalCooldown = CRYSTAL_COOLDOWN;
    
    log(`üéâ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! +${currentQuest.reward}‚Ç∏`);
    log(`‚è≥ –ù–æ–≤—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞`);
    
    updateCurrencyDisplay();
    document.getElementById('questInfo').textContent = '‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!';
    saveGame();
  }
}

function addToInventory(resource, amount = 1) {
  if (!inventory.hasOwnProperty(resource)) {
    console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å:', resource);
    return false;
  }
  
  inventory[resource] = Math.max(0, (inventory[resource] || 0) + amount);
  
  if (resource === '–ö—Ä–∏—Å—Ç–∞–ª–ª') checkCrystalQuest();
  
  saveGame();
  return true;
}

function saveGame() {
  if (Date.now() - lastSaveTime < 2000) return;
  
  const saveData = {
    inventory: inventory,
    tng: tng,
    coalEnabled: coalEnabled,
    gameTime: gameTime,
    isDay: isDay,
    passiveCounter: passiveCounter,
    sellMode: sellMode,
    currentQuest: currentQuest,
    questCompleted: questCompleted,
    crystalCooldown: crystalCooldown,
    advertisements: adsManager?.getAdsData?.() || [],
    lastUpdate: Date.now()
  };
  
  const currentState = JSON.stringify(saveData);
  if (currentState !== lastSavedState) {
    localStorage.setItem(STORAGE_KEY, currentState);
    lastSavedState = currentState;
    lastSaveTime = Date.now();
  }
}

function loadGame() {
  const saved = localStorage.getItem(STORAGE_KEY);
  if (!saved) {
    generateNewQuest();
    return;
  }

  try {
    const data = JSON.parse(saved);
    
    Object.keys(inventory).forEach(key => {
      if (data.inventory?.[key] !== undefined) {
        inventory[key] = data.inventory[key];
      }
    });
    
    tng = data.tng || 0;
    coalEnabled = Boolean(data.coalEnabled);
    gameTime = data.gameTime || 15;
    isDay = Boolean(data.isDay);
    passiveCounter = data.passiveCounter || 0;
    sellMode = Boolean(data.sellMode);
    currentQuest = data.currentQuest || null;
    questCompleted = Boolean(data.questCompleted);
    crystalCooldown = data.crystalCooldown || 0;
    
    if (data.lastUpdate) {
      const secondsPassed = Math.floor((Date.now() - data.lastUpdate) / 1000);
      const fullCycles = Math.floor(secondsPassed / 15);
      
      for (let i = 0; i < fullCycles; i++) isDay = !isDay;
      
      gameTime = (data.gameTime || 15) - (secondsPassed % 15);
      if (gameTime <= 0) {
        gameTime += 15;
        isDay = !isDay;
      }
      
      if (crystalCooldown > 0) {
        crystalCooldown = Math.max(0, crystalCooldown - secondsPassed);
      }
    }
    
    if (questCompleted && inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª'] > 0) {
      inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª'] = 0;
    }

    adsManager = new AdsManager({
      tng: tng,
      log: log,
      updateCurrencyDisplay: updateCurrencyDisplay,
      saveGame: saveGame
    });
    
    if (Array.isArray(data.advertisements)) {
      adsManager.loadAds(data.advertisements);
    }
    
    if (currentQuest) {
      document.getElementById('questInfo').textContent = 
        questCompleted 
          ? '‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!' 
          : `üìå –ö–≤–µ—Å—Ç: ${currentQuest.amount} ${currentQuest.resource} (${currentQuest.reward}‚Ç∏)`;
    } else {
      generateNewQuest();
    }
    
    updateTimeDisplay();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    resetGame();
  }
}

function resetGame() {
  Object.keys(inventory).forEach(key => inventory[key] = 0);
  inventory['–ò–ò'] = 1;
  tng = 0;
  coalEnabled = false;
  gameTime = 15;
  isDay = true;
  passiveCounter = 0;
  sellMode = false;
  currentQuest = null;
  questCompleted = false;
  crystalCooldown = 0;
  saveGame();
}

function handleCoalClick() {
  if (sellMode) return;
  
  if (coalEnabled) {
    coalEnabled = false;
    log('–£–≥–æ–ª—å –≤—ã–∫–ª—é—á–µ–Ω');
  } else if (inventory['–£–≥–æ–ª—å'] > 0) {
    coalEnabled = true;
    addToInventory('–£–≥–æ–ª—å', -1);
    log('–£–≥–æ–ª—å –≤–∫–ª—é—á—ë–Ω (-1)');
  }
  
  render();
}

function handleTrashClick() {
  if (!sellMode || inventory['–ú—É—Å–æ—Ä'] <= 0) return;
  
  const count = inventory['–ú—É—Å–æ—Ä'];
  inventory['–ú—É—Å–æ—Ä'] = 0;
  tng += count;
  log(`–ü—Ä–æ–¥–∞–Ω–æ ${count} –º—É—Å–æ—Ä–∞ +${count}‚Ç∏`);
  sellMode = false;
  updateCurrencyDisplay();
  saveGame();
  render();
}

function render() {
  const currentState = `${inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª']}|${tng}|${isDay}|${Math.floor(gameTime)}|${sellMode}|${coalEnabled}|${crystalCooldown}|${questCompleted}`;
  if (currentState === lastRenderState) return;
  lastRenderState = currentState;

  const invDiv = document.getElementById('inventory');
  const leftDiv = document.getElementById('leftSlots');
  const rightDiv = document.getElementById('rightSlots');
  const aiSlot = document.getElementById('aiSlot');

  invDiv.innerHTML = '';
  leftDiv.innerHTML = '';
  rightDiv.innerHTML = '';

  let renderedSlots = 0;
  Object.entries(inventory).forEach(([name, count]) => {
    if (name === '–ò–ò') return;

    const slot = document.createElement('div');
    slot.className = `slot ${name === '–ö—Ä–∏—Å—Ç–∞–ª–ª' ? 'crystal-slot' : ''}`;
    slot.dataset.resource = name;
    slot.innerHTML = `${name} x${count}`;

    if (name === '–ú—É—Å–æ—Ä' && sellMode && count > 0) {
      slot.classList.add('sell-mode');
      const sellLabel = document.createElement('div');
      sellLabel.className = 'sell-label';
      sellLabel.innerText = '–ü—Ä–æ–¥–∞—Ç—å';
      slot.appendChild(sellLabel);
      slot.onclick = handleTrashClick;
    }

    if (name === '–£–≥–æ–ª—å' && count > 0) {
      slot.style.borderColor = coalEnabled ? 'lime' : '#888';
      slot.onclick = handleCoalClick;
    }

    invDiv.appendChild(slot);
    renderedSlots++;
  });

  for (let i = renderedSlots; i < maxSlots; i++) {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = '[–ø—É—Å—Ç–æ]';
    invDiv.appendChild(slot);
  }

  leftPanelItems.forEach(name => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = name || '[–ø—É—Å—Ç–æ]';
    leftDiv.appendChild(slot);
  });

  rightPanelItems.forEach(name => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = name || '[–ø—É—Å—Ç–æ]';
    rightDiv.appendChild(slot);
  });

  const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] > 0);
  aiSlot.innerText = aiActive ? 'ü§ñ –ò–ò –∞–∫—Ç–∏–≤–µ–Ω' : 'üõë –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
  aiSlot.style.color = aiActive ? 'lime' : 'red';

  updateTimeDisplay();
  updateCurrencyDisplay();
}

document.getElementById('mineBtn').addEventListener('click', () => {
  const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] > 0);
  if (!aiActive) {
    log('‚ùå –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ù—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è');
    return;
  }
  
  const chances = coalEnabled ? COAL_ENERGY_CHANCES : SOLAR_ENERGY_CHANCES;
  const crystalChance = (crystalCooldown <= 0 && !questCompleted) ? chances.CRYSTAL : 0;

  if (Math.random() < chances.COAL) {
    addToInventory('–£–≥–æ–ª—å', 1);
    log(`–ù–∞–π–¥–µ–Ω —É–≥–æ–ª—å ü™®`);
  }
  
  if (Math.random() < chances.TRASH) {
    addToInventory('–ú—É—Å–æ—Ä', 1);
    log(`–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è`);
  }
  
  if (Math.random() < crystalChance) {
    addToInventory('–ö—Ä–∏—Å—Ç–∞–ª–ª', 1);
    log(`‚ú® –ù–∞–π–¥–µ–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª!`);
  }
  
  render();
});

document.getElementById('toggleTrade').addEventListener('click', () => {
  sellMode = !sellMode;
  log(sellMode ? '–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–∫–ª—é—á—ë–Ω' : '–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω');
  saveGame();
  render();
});

let lastFrameTime = Date.now();

function gameLoop() {
  const currentTime = Date.now();
  const deltaTime = Math.min((currentTime - lastFrameTime) / 1000, 1.0);
  lastFrameTime = currentTime;

  gameTime -= deltaTime;
  if (gameTime <= 0) {
    gameTime = 15;
    isDay = !isDay;
    
    if (!isDay && coalEnabled) {
      if (inventory['–£–≥–æ–ª—å'] > 0) {
        addToInventory('–£–≥–æ–ª—å', -1);
        log('üåô –ù–æ—á—å ‚Äî —Å–≥–æ—Ä–µ–ª 1 —É–≥–æ–ª—å');
      } else {
        coalEnabled = false;
        log('üåô –ù–æ—á—å ‚Äî —É–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è');
      }
    } else {
      log(isDay ? 'üåû –î–µ–Ω—å' : 'üåô –ù–æ—á—å');
    }
    
    saveGame();
  }

  if (crystalCooldown > 0) {
    crystalCooldown = Math.max(0, crystalCooldown - deltaTime);
    if (crystalCooldown <= 0 && questCompleted) {
      questCompleted = false;
      generateNewQuest();
      log('üîÑ –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
      saveGame();
    }
  }

  if (passiveCounter >= 7) {
    passiveCounter = 0;
    const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] > 0);
    
    if (aiActive) {
      const chances = coalEnabled ? COAL_ENERGY_CHANCES : SOLAR_ENERGY_CHANCES;
      const passiveCrystalChance = (crystalCooldown <= 0 && !questCompleted) ? chances.CRYSTAL / 2 : 0;
      
      if (Math.random() < chances.COAL / 2) {
        addToInventory('–£–≥–æ–ª—å', 1);
        log(`–ü–∞—Å—Å–∏–≤–Ω–æ: —É–≥–æ–ª—å ü™®`);
      }
      
      if (Math.random() < chances.TRASH / 2) {
        addToInventory('–ú—É—Å–æ—Ä', 1);
        log(`–ü–∞—Å—Å–∏–≤–Ω–æ: –º—É—Å–æ—Ä ‚ôªÔ∏è`);
      }

      if (Math.random() < passiveCrystalChance) {
        addToInventory('–ö—Ä–∏—Å—Ç–∞–ª–ª', 1);
        log(`‚ú® –ü–∞—Å—Å–∏–≤–Ω–æ: –∫—Ä–∏—Å—Ç–∞–ª–ª!`);
      }
    }
  } else {
    passiveCounter += deltaTime;
  }

  render();
  requestAnimationFrame(gameLoop);
}

if (!adsManager) {
  adsManager = new AdsManager({
    tng: tng,
    log: log,
    updateCurrencyDisplay: updateCurrencyDisplay,
    saveGame: saveGame
  });
}

document.body.insertAdjacentHTML('beforeend', `
  <div id="crystalInfo" style="position: fixed; top: 10px; right: 10px; background: rgba(0,0,0,0.7); color: white; padding: 5px; border-radius: 5px; font-size: 14px;"></div>
`);

loadGame();
gameLoop();