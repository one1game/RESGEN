// –ü–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let adsManager;

// –í —Ñ—É–Ω–∫—Ü–∏–∏ loadGame() –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
adsManager = new AdsManager(this);
if (data.advertisements) {
  adsManager.loadAds(data.advertisements);
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ saveGame() –≤ –æ–±—ä–µ–∫—Ç saveData –¥–æ–±–∞–≤—å—Ç–µ:
advertisements: adsManager.getSaveData(),

// –í –∫–æ–Ω—Ü–µ —Å–∫—Ä–∏–ø—Ç–∞ (–ø–æ—Å–ª–µ loadGame()):
adsManager = new AdsManager({
  tng,
  log: log,
  updateCurrencyDisplay: updateCurrencyDisplay,
  saveGame: saveGame
});

const STORAGE_KEY = 'coreboxSave';

const inventory = { '–ò–ò': 1, '–£–≥–æ–ª—å': 0, '–ú—É—Å–æ—Ä': 0, '–ö—Ä–∏—Å—Ç–∞–ª–ª': 0 };
let tng = 0;
const maxSlots = 9;
let coalEnabled = false;
let gameTime = 15;
let isDay = true;
let passiveCounter = 0;
let sellMode = false;
let currentQuest = null;
let questCompleted = false;
let crystalFoundToday = false;
const questResources = ['–ö—Ä–∏—Å—Ç–∞–ª–ª'];

const leftPanelItems = ['–¢–≠–¶', '', '', '', ''];
const rightPanelItems = ['', '', '', '', ''];

function log(message) {
  const box = document.getElementById('logBox');
  box.innerHTML += `üü¢ ${message}<br>`;
  box.scrollTop = box.scrollHeight;
}

function updateTimeDisplay() {
  const icon = isDay ? 'üåû' : 'üåô';
  document.getElementById('timeDisplay').innerText = `${icon} ${isDay ? '–î–µ–Ω—å' : '–ù–æ—á—å'} ‚Äî ${gameTime}s –æ—Å—Ç–∞–ª–æ—Å—å`;
}

function updateCurrencyDisplay() {
  document.getElementById('currencyDisplay').innerText = `TNG: ${tng}‚Ç∏`;
}

function generateNewQuest() {
  const randomResource = questResources[Math.floor(Math.random() * questResources.length)];
  currentQuest = {
    resource: randomResource,
    amount: 1,
    reward: 2000 // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 2000‚Ç∏
  };
  questCompleted = false;
  crystalFoundToday = false;
  log(`üìú –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç: –¥–æ–±—ã—Ç—å ${currentQuest.resource}! –ù–∞–≥—Ä–∞–¥–∞: ${currentQuest.reward}‚Ç∏`);
  document.getElementById('questInfo').textContent = `üìå –ö–≤–µ—Å—Ç: ${currentQuest.resource} (${currentQuest.reward}‚Ç∏)`;
  saveGame();
}

function checkQuest(resource) {
  if (!currentQuest || questCompleted) return;
  
  if (resource === currentQuest.resource) {
    questCompleted = true;
    tng += currentQuest.reward;
    log(`üéâ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${currentQuest.reward}‚Ç∏`);
    updateCurrencyDisplay();
    setTimeout(generateNewQuest, 2000);
    saveGame();
  }
}

function saveGame() {
  const saveData = {
    inventory,
    tng,
    coalEnabled,
    gameTime,
    isDay,
    passiveCounter,
    sellMode,
    currentQuest,
    questCompleted,
    crystalFoundToday,
    lastUpdate: Date.now()
  };
  localStorage.setItem(STORAGE_KEY, JSON.stringify(saveData));
}

function loadGame() {
  const saved = localStorage.getItem(STORAGE_KEY);
  if (saved) {
    try {
      const data = JSON.parse(saved);
      if (data.inventory) {
        Object.keys(inventory).forEach(key => {
          if (data.inventory[key] !== undefined) inventory[key] = data.inventory[key];
        });
      }
      tng = data.tng ?? 0;
      coalEnabled = data.coalEnabled ?? false;
      gameTime = data.gameTime ?? 15;
      isDay = data.isDay ?? true;
      passiveCounter = data.passiveCounter ?? 0;
      sellMode = data.sellMode ?? false;
      currentQuest = data.currentQuest || null;
      questCompleted = data.questCompleted || false;
      crystalFoundToday = data.crystalFoundToday ?? false;
      
      if (data.lastUpdate) {
        const secondsPassed = Math.floor((Date.now() - data.lastUpdate) / 1000);
        gameTime = data.gameTime ?? 15;
        
        while (secondsPassed > 0) {
          gameTime--;
          secondsPassed--;
          if (gameTime <= 0) {
            gameTime = 15;
            isDay = !isDay;
            crystalFoundToday = false;
          }
        }
      }
      
      if (currentQuest) {
        document.getElementById('questInfo').textContent = 
          questCompleted 
            ? 'üîÑ –ö–≤–µ—Å—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...' 
            : `üìå –ö–≤–µ—Å—Ç: ${currentQuest.resource} (${currentQuest.reward}‚Ç∏)`;
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', e);
    }
  }
  if (!currentQuest) {
    generateNewQuest();
  }
}

function render() {
  const invDiv = document.getElementById('inventory');
  const leftDiv = document.getElementById('leftSlots');
  const rightDiv = document.getElementById('rightSlots');
  const aiSlot = document.getElementById('aiSlot');

  invDiv.innerHTML = '';
  leftDiv.innerHTML = '';
  rightDiv.innerHTML = '';

  let renderedSlots = 0;
  Object.keys(inventory).forEach(name => {
    if (name === '–ò–ò') return;
    
    if (name === '–ö—Ä–∏—Å—Ç–∞–ª–ª' && inventory[name] === 0) return;
    
    const slot = document.createElement('div');
    slot.className = 'slot' + (name === '–ö—Ä–∏—Å—Ç–∞–ª–ª' ? ' crystal-slot' : '');
    slot.dataset.resource = name;
    slot.innerHTML = `${name} x${inventory[name]}`;

    if (name === '–ö—Ä–∏—Å—Ç–∞–ª–ª' && inventory[name] > 0) {
      inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª'] = 0;
      saveGame();
    }

    if (sellMode && name === '–ú—É—Å–æ—Ä' && inventory[name] > 0) {
      slot.classList.add('sell-mode');
      const sellLabel = document.createElement('div');
      sellLabel.className = 'sell-label';
      sellLabel.innerText = '–ü—Ä–æ–¥–∞—Ç—å';
      slot.appendChild(sellLabel);
      slot.addEventListener('click', () => {
        const count = inventory['–ú—É—Å–æ—Ä'];
        if (count > 0) {
          inventory['–ú—É—Å–æ—Ä'] = 0;
          tng += count;
          log(`–ü—Ä–æ–¥–∞–Ω–æ ${count} –º—É—Å–æ—Ä–∞ –∑–∞ ${count}‚Ç∏`);
          sellMode = false;
          updateCurrencyDisplay();
          saveGame();
          render();
        }
      });
    }

    if (name === '–£–≥–æ–ª—å') {
      slot.style.borderColor = coalEnabled ? 'lime' : '#888';
      slot.addEventListener('click', () => {
        if (sellMode) return;
        if (coalEnabled) {
          coalEnabled = false;
          log('–£–≥–æ–ª—å üî• –≤—ã–∫–ª—é—á–µ–Ω');
          saveGame();
          render();
        } else if (inventory['–£–≥–æ–ª—å'] > 0) {
          coalEnabled = true;
          inventory['–£–≥–æ–ª—å']--;
          log('–£–≥–æ–ª—å üî• –≤–∫–ª—é—á—ë–Ω (‚àí1)');
          saveGame();
          render();
        }
      });
    }

    invDiv.appendChild(slot);
    renderedSlots++;
  });

  for (let i = renderedSlots; i < maxSlots; i++) {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = '[–ø—É—Å—Ç–æ]';
    invDiv.appendChild(slot);
  }

  leftPanelItems.forEach(name => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = name || '[–ø—É—Å—Ç–æ]';
    leftDiv.appendChild(slot);
  });

  rightPanelItems.forEach(name => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = name || '[–ø—É—Å—Ç–æ]';
    rightDiv.appendChild(slot);
  });

  const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
  aiSlot.innerText = aiActive ? 'ü§ñ –ò–ò –∞–∫—Ç–∏–≤–µ–Ω' : 'üõë –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';

  updateTimeDisplay();
  updateCurrencyDisplay();
}

document.getElementById('mineBtn').addEventListener('click', () => {
  const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
  if (!aiActive || (!isDay && !coalEnabled)) return;
  
  const coalChance = (coalEnabled ? 0.07 : 0.04) / 2;
  const trashChance = (coalEnabled ? 0.02 : 0.01) / 2;
  const crystalChance = (!crystalFoundToday && currentQuest && !questCompleted) ? 0.0167 : 0; // 1.67% —à–∞–Ω—Å

  if (Math.random() < coalChance) {
    inventory['–£–≥–æ–ª—å']++;
    log('–ù–∞–π–¥–µ–Ω —É–≥–æ–ª—å ü™®');
    saveGame();
  }
  if (Math.random() < trashChance) {
    inventory['–ú—É—Å–æ—Ä']++;
    log('–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
    saveGame();
  }
  if (Math.random() < crystalChance) {
    inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª'] = 1;
    crystalFoundToday = true;
    log('‚ú® –ù–∞–π–¥–µ–Ω —Ä–µ–¥–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª! (–∏—Å—á–µ–∑–Ω–µ—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è)');
    checkQuest('–ö—Ä–∏—Å—Ç–∞–ª–ª');
    saveGame();
  }
  render();
});

document.getElementById('toggleTrade').addEventListener('click', () => {
  sellMode = !sellMode;
  if (sellMode) {
    log('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–∫–ª—é—á—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º—É—Å–æ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
  } else {
    log('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω.');
  }
  saveGame();
  render();
});

setInterval(() => {
  gameTime--;
  if (gameTime <= 0) {
    gameTime = 15;
    isDay = !isDay;
    crystalFoundToday = false;
    if (!isDay && coalEnabled) {
      if (inventory['–£–≥–æ–ª—å'] > 0) {
        inventory['–£–≥–æ–ª—å']--;
        log('–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô ‚Äî —Å–≥–æ—Ä–µ–ª 1 —É–≥–æ–ª—å');
      } else {
        coalEnabled = false;
        log('–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô ‚Äî —É–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ò–ò –æ—Ç–∫–ª—é—á—ë–Ω');
      }
    } else {
      log(isDay ? '–ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å üåû' : '–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô');
    }
    saveGame();
  }

  passiveCounter++;
  if (passiveCounter >= 7) {
    passiveCounter = 0;
    const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
    if (!isDay && !coalEnabled) return;
    if (aiActive) {
      const coalChance = coalEnabled ? 0.01 : 0.005;
      const trashChance = coalEnabled ? 0.01 : 0.005;
      
      if (Math.random() < coalChance) {
        inventory['–£–≥–æ–ª—å']++;
        log('–ü–∞—Å—Å–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω —É–≥–æ–ª—å ü™®');
        saveGame();
      }
      if (Math.random() < trashChance) {
        inventory['–ú—É—Å–æ—Ä']++;
        log('–ü–∞—Å—Å–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
        saveGame();
      }
      // –ü–∞—Å—Å–∏–≤–Ω–∞—è –¥–æ–±—ã—á–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ —É–¥–∞–ª–µ–Ω–∞
    }
  }

  render();
}, 1000);

loadGame();
render();