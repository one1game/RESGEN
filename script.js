const STORAGE_KEY = 'coreboxSave';

const inventory = { '–ò–ò': 1, '–£–≥–æ–ª—å': 0, '–ú—É—Å–æ—Ä': 0 };
let tng = 0;
const maxSlots = 9;
let coalEnabled = false;
let gameTime = 15;
let isDay = true;
let passiveCounter = 0;
let sellMode = false;
let lastUpdate = Date.now(); // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

const leftPanelItems = ['–¢–≠–¶', '', '', '', ''];
const rightPanelItems = ['', '', '', '', ''];

function log(message) {
  const box = document.getElementById('logBox');
  box.innerHTML += `üü¢ ${message}<br>`;
  box.scrollTop = box.scrollHeight;
}

function updateTimeDisplay() {
  const icon = isDay ? 'üåû' : 'üåô';
  document.getElementById('timeDisplay').innerText = `${icon} ${isDay ? '–î–µ–Ω—å' : '–ù–æ—á—å'} ‚Äî ${gameTime}s –æ—Å—Ç–∞–ª–æ—Å—å`;
}

function updateCurrencyDisplay() {
  document.getElementById('currencyDisplay').innerText = `TNG: ${tng}‚Ç∏`;
}

function saveGame() {
  const saveData = {
    inventory,
    tng,
    coalEnabled,
    gameTime,
    isDay,
    passiveCounter,
    sellMode,
    lastUpdate: Date.now() // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  };
  localStorage.setItem(STORAGE_KEY, JSON.stringify(saveData));
}

function loadGame() {
  const saved = localStorage.getItem(STORAGE_KEY);
  if (saved) {
    try {
      const data = JSON.parse(saved);
      if (data.inventory) {
        Object.keys(inventory).forEach(key => {
          if (data.inventory[key] !== undefined) inventory[key] = data.inventory[key];
        });
      }
      tng = data.tng ?? 0;
      coalEnabled = data.coalEnabled ?? false;
      isDay = data.isDay ?? true;
      passiveCounter = data.passiveCounter ?? 0;
      sellMode = data.sellMode ?? false;
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      if (data.lastUpdate) {
        const secondsPassed = Math.floor((Date.now() - data.lastUpdate) / 1000);
        gameTime = data.gameTime ?? 15;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
        while (secondsPassed > 0) {
          gameTime--;
          secondsPassed--;
          if (gameTime <= 0) {
            gameTime = 15;
            isDay = !isDay;
          }
        }
      } else {
        gameTime = data.gameTime ?? 15;
      }
      
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', e);
    }
  }
}

// ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ render(), –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ setInterval –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

document.getElementById('mineBtn').addEventListener('click', () => {
  const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
  if (!aiActive || (!isDay && !coalEnabled)) return;
  const coalChance = coalEnabled ? 0.07 : 0.04;
  const trashChance = coalEnabled ? 0.02 : 0.01;

  if (Math.random() < coalChance) {
    inventory['–£–≥–æ–ª—å']++;
    log('–ù–∞–π–¥–µ–Ω —É–≥–æ–ª—å ü™®');
    saveGame();
  }
  if (Math.random() < trashChance) {
    inventory['–ú—É—Å–æ—Ä']++;
    log('–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
    saveGame();
  }
  render();
});

document.getElementById('toggleTrade').addEventListener('click', () => {
  sellMode = !sellMode;
  if (sellMode) {
    log('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–∫–ª—é—á—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º—É—Å–æ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
  } else {
    log('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω.');
  }
  saveGame();
  render();
});

setInterval(() => {
  gameTime--;
  if (gameTime <= 0) {
    gameTime = 15;
    isDay = !isDay;
    if (!isDay && coalEnabled) {
      if (inventory['–£–≥–æ–ª—å'] > 0) {
        inventory['–£–≥–æ–ª—å']--;
        log('–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô ‚Äî —Å–≥–æ—Ä–µ–ª 1 —É–≥–æ–ª—å');
      } else {
        coalEnabled = false;
        log('–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô ‚Äî —É–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ò–ò –æ—Ç–∫–ª—é—á—ë–Ω');
      }
    } else {
      log(isDay ? '–ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å üåû' : '–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô');
    }
  }

  passiveCounter++;
  if (passiveCounter >= 7) {
    passiveCounter = 0;
    const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
    if (!isDay && !coalEnabled) return;
    if (aiActive) {
      const coalChance = coalEnabled ? 0.01 : 0.005;
      const trashChance = coalEnabled ? 0.01 : 0.005;
      if (Math.random() < coalChance) {
        inventory['–£–≥–æ–ª—å']++;
        log('–ü–∞—Å—Å–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω —É–≥–æ–ª—å ü™®');
      }
      if (Math.random() < trashChance) {
        inventory['–ú—É—Å–æ—Ä']++;
        log('–ü–∞—Å—Å–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
      }
    }
  }

  saveGame(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
  render();
}, 1000);

loadGame();
render();