const STORAGE_KEY = 'coreboxSave';

const inventory = { '–ò–ò': 1, '–£–≥–æ–ª—å': 0, '–ú—É—Å–æ—Ä': 0 };
let tng = 0; // –≤–∞–ª—é—Ç–∞
const maxSlots = 9;
let coalEnabled = false;
let gameTime = 15;
let isDay = true;
let passiveCounter = 0;
let sellMode = false;

const leftPanelItems = ['–¢–≠–¶', '', '', '', ''];
const rightPanelItems = ['', '', '', '', ''];

function log(message) {
  const box = document.getElementById('logBox');
  box.innerHTML += `üü¢ ${message}<br>`;
  box.scrollTop = box.scrollHeight;
}

function updateTimeDisplay() {
  const icon = isDay ? 'üåû' : 'üåô';
  document.getElementById('timeDisplay').innerText = `${icon} ${isDay ? '–î–µ–Ω—å' : '–ù–æ—á—å'} ‚Äî ${gameTime}s –æ—Å—Ç–∞–ª–æ—Å—å`;
}

function updateCurrencyDisplay() {
  document.getElementById('currencyDisplay').innerText = `TNG: ${tng}‚Ç∏`;
}

function saveGame() {
  const saveData = {
    inventory,
    tng,
    coalEnabled,
    gameTime,
    isDay,
    passiveCounter,
    sellMode,
  };
  localStorage.setItem(STORAGE_KEY, JSON.stringify(saveData));
}

function loadGame() {
  const saved = localStorage.getItem(STORAGE_KEY);
  if (saved) {
    try {
      const data = JSON.parse(saved);
      if (data.inventory) {
        Object.keys(inventory).forEach(key => {
          if (data.inventory[key] !== undefined) inventory[key] = data.inventory[key];
        });
      }
      tng = data.tng ?? 0;
      coalEnabled = data.coalEnabled ?? false;
      gameTime = data.gameTime ?? 15;
      isDay = data.isDay ?? true;
      passiveCounter = data.passiveCounter ?? 0;
      sellMode = data.sellMode ?? false;
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', e);
    }
  }
}

function render() {
  const invDiv = document.getElementById('inventory');
  const leftDiv = document.getElementById('leftSlots');
  const rightDiv = document.getElementById('rightSlots');
  const aiSlot = document.getElementById('aiSlot');

  invDiv.innerHTML = '';
  leftDiv.innerHTML = '';
  rightDiv.innerHTML = '';

  let renderedSlots = 0;
  Object.keys(inventory).forEach(name => {
    if (name === '–ò–ò') return;
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.dataset.resource = name;
    slot.innerHTML = `${name} x${inventory[name]}`;

    // –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–∞–∂–∏, –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –º—É—Å–æ—Ä –∫—Ä–∞—Å–Ω—ã–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–æ–¥–∞—Ç—å"
    if (sellMode && name === '–ú—É—Å–æ—Ä' && inventory[name] > 0) {
      slot.classList.add('sell-mode');
      const sellLabel = document.createElement('div');
      sellLabel.className = 'sell-label';
      sellLabel.innerText = '–ü—Ä–æ–¥–∞—Ç—å';
      slot.appendChild(sellLabel);
      slot.addEventListener('click', () => {
        const count = inventory['–ú—É—Å–æ—Ä'];
        if (count > 0) {
          inventory['–ú—É—Å–æ—Ä'] = 0;
          tng += count; // –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
          log(`–ü—Ä–æ–¥–∞–Ω–æ ${count} –º—É—Å–æ—Ä–∞ –∑–∞ ${count}‚Ç∏`);
          sellMode = false; // –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
          updateCurrencyDisplay();
          saveGame();
          render();
        }
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥–ª—è - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–∞–∂–∏
    if (name === '–£–≥–æ–ª—å') {
      slot.style.borderColor = coalEnabled ? 'lime' : '#888';
      slot.addEventListener('click', () => {
        if (sellMode) return; // –Ω–µ –≤–∫–ª—é—á–∞–µ–º —É–≥–æ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–∞–∂–∏
        if (coalEnabled) {
          coalEnabled = false;
          log('–£–≥–æ–ª—å üî• –≤—ã–∫–ª—é—á–µ–Ω');
          saveGame();
          render();
        } else if (inventory['–£–≥–æ–ª—å'] > 0) {
          coalEnabled = true;
          inventory['–£–≥–æ–ª—å']--;
          log('–£–≥–æ–ª—å üî• –≤–∫–ª—é—á—ë–Ω (‚àí1)');
          saveGame();
          render();
        }
      });
    }

    invDiv.appendChild(slot);
    renderedSlots++;
  });

  for (let i = renderedSlots; i < maxSlots; i++) {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = '[–ø—É—Å—Ç–æ]';
    invDiv.appendChild(slot);
  }

  leftPanelItems.forEach(name => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = name || '[–ø—É—Å—Ç–æ]';
    leftDiv.appendChild(slot);
  });

  rightPanelItems.forEach(name => {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.innerText = name || '[–ø—É—Å—Ç–æ]';
    rightDiv.appendChild(slot);
  });

  const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
  aiSlot.innerText = aiActive ? 'ü§ñ –ò–ò –∞–∫—Ç–∏–≤–µ–Ω' : 'üõë –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';

  updateTimeDisplay();
  updateCurrencyDisplay();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function init() {
  document.getElementById('mineBtn').addEventListener('click', () => {
    const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
    if (!aiActive || (!isDay && !coalEnabled)) return;
    const coalChance = coalEnabled ? 0.07 : 0.04;
    const trashChance = coalEnabled ? 0.02 : 0.01;

    if (Math.random() < coalChance) {
      inventory['–£–≥–æ–ª—å']++;
      log('–ù–∞–π–¥–µ–Ω —É–≥–æ–ª—å ü™®');
      saveGame();
    }
    if (Math.random() < trashChance) {
      inventory['–ú—É—Å–æ—Ä']++;
      log('–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
      saveGame();
    }
    render();
  });

  document.getElementById('toggleTrade').addEventListener('click', () => {
    sellMode = !sellMode;
    if (sellMode) {
      log('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–∫–ª—é—á—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º—É—Å–æ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.');
    } else {
      log('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω.');
    }
    saveGame();
    render();
  });

  setInterval(() => {
    gameTime--;
    if (gameTime <= 0) {
      gameTime = 15;
      isDay = !isDay;
      if (!isDay && coalEnabled) {
        if (inventory['–£–≥–æ–ª—å'] > 0) {
          inventory['–£–≥–æ–ª—å']--;
          log('–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô ‚Äî —Å–≥–æ—Ä–µ–ª 1 —É–≥–æ–ª—å');
        } else {
          coalEnabled = false;
          log('–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô ‚Äî —É–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ò–ò –æ—Ç–∫–ª—é—á—ë–Ω');
        }
      } else {
        log(isDay ? '–ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å üåû' : '–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô');
      }
      saveGame();
    }

    passiveCounter++;
    if (passiveCounter >= 7) {
      passiveCounter = 0;
      const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] >= 0);
      if (!isDay && !coalEnabled) return;
      if (aiActive) {
        const coalChance = coalEnabled ? 0.01 : 0.005;
        const trashChance = coalEnabled ? 0.01 : 0.005;
        if (Math.random() < coalChance) {
          inventory['–£–≥–æ–ª—å']++;
          log('–ü–∞—Å—Å–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω —É–≥–æ–ª—å ü™®');
          saveGame();
        }
        if (Math.random() < trashChance) {
          inventory['–ú—É—Å–æ—Ä']++;
          log('–ü–∞—Å—Å–∏–≤–Ω–æ –Ω–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
          saveGame();
        }
      }
    }

    render();
  }, 1000);

  loadGame();
  render();
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', init);
