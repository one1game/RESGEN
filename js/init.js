// ======== init.js ========

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
  const now = Date.now();
  const secondsPassed = Math.floor((now - lastUpdateTime) / 1000);
  lastUpdateTime = now;
  
  gameTime -= secondsPassed;
  
  while (gameTime <= 0) {
    gameTime += CYCLE_DURATION;
    const wasNight = !isDay;
    isDay = !isDay;
    
    if (wasNight) {
      nightsSurvived++;
      
      if (coalEnabled) {
        nightsWithCoal++;
        
        if ((inventory['–£–≥–æ–ª—å'] || 0) > 0) {
          inventory['–£–≥–æ–ª—å']--;
          log('üåô –ù–æ—á—å - —Å–≥–æ—Ä–µ–ª 1 —É–≥–æ–ª—å');
        } else {
          coalEnabled = false;
          log('üåô –ù–æ—á—å - —É–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        }
      }
      
      // –ê—Ç–∞–∫–∞ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
      const defensePower = upgrades.defense ? 30 + (upgrades.defenseLevel * 15) : 0;
      if (Math.random() * 100 > defensePower) {
        handleRebelAttack();
      } else if (upgrades.defense) {
        log('üåô –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç—Ä–∞–∑–∏–ª–∞ –∞—Ç–∞–∫—É –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤');
        successfulDefenses++;
      }
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤ –Ω–æ—á—å—é
      if (Math.random() < 0.3) {
        rebelActivity++;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–æ—á—å—é
      checkQuestsProgress();
    } else {
      // –î–µ–Ω—å - —Å–Ω–∏–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
      rebelActivity = Math.max(0, rebelActivity - 1);
    }
    
    log(isDay ? '‚òÄÔ∏è –ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å' : 'üåô –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å');
    saveGame();
  }

  // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
  passiveCounter += secondsPassed;
  while (passiveCounter >= 10) {
    passiveCounter -= 10;
    const aiActive = (isDay || coalEnabled) && Date.now() > aiDisabledUntil;
    if (aiActive) {
      const coalChance = 0.003 + (upgrades.mining * 0.001);
      const trashChance = 0.007 + (upgrades.mining * 0.001);
      const chipChance = 0.001;
      const plasmaChance = 0.0005;
      
      if (Math.random() < coalChance) {
        inventory['–£–≥–æ–ª—å'] = (inventory['–£–≥–æ–ª—å'] || 0) + 1;
        totalMined++;
      }
      if (Math.random() < trashChance) {
        inventory['–ú—É—Å–æ—Ä'] = (inventory['–ú—É—Å–æ—Ä'] || 0) + 1;
        totalMined++;
      }
      if (Math.random() < chipChance) {
        inventory['–ß–∏–ø—ã'] = (inventory['–ß–∏–ø—ã'] || 0) + 1;
        totalMined++;
      }
      if (Math.random() < plasmaChance) {
        inventory['–ü–ª–∞–∑–º–∞'] = (inventory['–ü–ª–∞–∑–º–∞'] || 0) + 1;
        totalMined++;
      }
      
      saveGame();
      checkQuestsProgress();
    }
  }

  render();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventListeners() {
  if (mineBtn) mineBtn.addEventListener('click', mineResources);
  if (upgradeMiningBtn) upgradeMiningBtn.addEventListener('click', upgradeMining);
  if (upgradeDefenseBtn) upgradeDefenseBtn.addEventListener('click', activateDefense);
  if (upgradeDefenseLevelBtn) upgradeDefenseLevelBtn.addEventListener('click', upgradeDefense);
  if (clearLogBtn) clearLogBtn.addEventListener('click', clearLog);
  if (autoScrollBtn) autoScrollBtn.addEventListener('click', toggleAutoScroll);
  if (buyModeBtn) buyModeBtn.addEventListener('click', () => toggleBuySellMode(true));
  if (sellModeBtn) sellModeBtn.addEventListener('click', () => toggleBuySellMode(false));
  
  document.querySelectorAll('.panel-title').forEach(title => {
    title.addEventListener('click', (e) => {
      if (e.target.classList.contains('collapse-icon')) return;
      const panel = title.closest('.panel');
      if (panel) toggleCollapse(panel);
    });
  });
  
  if (tabs.length > 0) {
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        switchTab(tab.dataset.tab);
      });
    });
  }
  
  initFloatingButton();
}

function initGame() {
  loadGame();
  initEventListeners();
  setupRadioPlayer();
  
  render();
  toggleBuySellMode(true);
  
  setInterval(gameLoop, 1000);
  
  log('–°–∏—Å—Ç–µ–º–∞ CoreBox 2.9 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤!');
  log('–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–ø–ª–µ–∫—Å–∞ –∏ –∑–∞—â–∏—Ç–∏—Ç—å –µ–≥–æ –æ—Ç –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤');
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', initGame);