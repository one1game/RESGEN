// ======== questSystem.js ========

function showStoryMessage(questId) {
  const messages = {
    awakening: "–°–∏—Å—Ç–µ–º–∞ –æ–∂–∏–≤–∞–µ—Ç! –ü–µ—Ä–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–æ–±—ã—Ç—ã. CoreBox –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.",
    power_restoration: "–¢–≠–¶ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –Ω–æ—á—å—é. –ù–æ –ø–æ–º–Ω–∏—Ç–µ - –∫–∞–∂–¥—É—é –Ω–æ—á—å —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–≥–æ–ª—å.",
    chips_discovery: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∏–ø—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–ª—É—á—à–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã –¥–æ–±—ã—á–∏.",
    plasma_breakthrough: "–ü–ª–∞–∑–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –≠—Ç–æ –∫–ª—é—á –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é —è–¥—Ä–∞ CoreBox.",
    defense_activation: "–ó–∞—â–∏—Ç–Ω—ã–µ —Ç—É—Ä–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å —É –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤.",
    ai_evolution: "–ò–ò –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ.",
    final_preparations: "–Ø–¥—Ä–æ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É. –û—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è...",
    great_awakening: "CoreBox –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–ª–∞–∑–º–µ–Ω–Ω–æ–µ —è–¥—Ä–æ –∑–∞–ø—É—â–µ–Ω–æ. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
  };
  
  if (messages[questId]) {
    log(`üí¨ ${messages[questId]}`);
  }
}

function completeCurrentQuest() {
  if (currentQuestIndex >= storyQuests.length) return;
  
  const quest = storyQuests[currentQuestIndex];
  if (quest && !quest.completed) {
    quest.completed = true;
    tng += quest.reward;
    log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ "${quest.title}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${quest.reward}‚Ç∏`);
    showStoryMessage(quest.id);
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ—Å–ª–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    if (quest.id === 'chips_discovery') {
      chipsUnlocked = true;
      inventory['–ß–∏–ø—ã'] = 0;
      log('üéõÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∏–ø—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥–æ–±—ã—á–∏!');
    }
    
    if (quest.id === 'plasma_breakthrough') {
      plasmaUnlocked = true;
      inventory['–ü–ª–∞–∑–º–∞'] = 0;
      log('‚ö° –ü–ª–∞–∑–º–∞ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–æ–±—ã—á–∏!');
      log('üí´ –ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –ø–ª–∞–∑–º—ã —à–∞–Ω—Å –µ–µ –¥–æ–±—ã—á–∏ —É–≤–µ–ª–∏—á–∏–ª—Å—è!');
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –¥–æ–±—ã—á–∏ –ø–ª–∞–∑–º—ã –ø–æ—Å–ª–µ –∫–≤–µ—Å—Ç–∞
      log('üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–ª–∞–∑–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–±—ã—á–∏ –ø–æ–≤—ã—à–µ–Ω–∞!');
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–≤–µ—Å—Ç–æ–≤
    applyQuestSpecialEffects(quest.id);
    
    currentQuestIndex++;
    saveGame();
    render();
  }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫–≤–µ—Å—Ç–æ–≤
function applyQuestSpecialEffects(questId) {
  switch(questId) {
    case 'power_restoration':
      log('‚ö° +10% –∫ —à–∞–Ω—Å—É –¥–æ–±—ã—á–∏ —É–≥–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!');
      break;
      
    case 'defense_activation':
      log('üõ°Ô∏è –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã —Ç–µ–ø–µ—Ä—å –∞—Ç–∞–∫—É—é—Ç —Ä–µ–∂–µ, –Ω–æ —Å –±–æ–ª—å—à–µ–π —Å–∏–ª–æ–π!');
      break;
      
    case 'ai_evolution':
      log('üöÄ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ 20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ!');
      break;
      
    case 'final_preparations':
      log('‚≠ê –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å –∫–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
      break;
  }
}

function checkQuestsProgress() {
  if (currentQuestIndex >= storyQuests.length) return;
  
  const quest = storyQuests[currentQuestIndex];
  if (!quest || quest.completed) return;
  
  let isCompleted = false;
  
  switch(quest.type) {
    case 'mine_any':
      isCompleted = totalMined >= quest.target;
      break;
      
    case 'activate_coal':
      isCompleted = coalEnabled;
      break;
      
    case 'survive_night':
      isCompleted = nightsWithCoal >= quest.target;
      break;
      
    case 'upgrade_mining':
      isCompleted = upgrades.mining >= quest.target;
      break;
      
    case 'mine_resource':
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
      const resourceCount = Number(inventory[quest.resource]) || 0;
      isCompleted = resourceCount >= quest.target;
      break;
      
    case 'activate_defense':
      isCompleted = upgrades.defense;
      break;
      
    case 'defend_attacks':
      isCompleted = successfulDefenses >= quest.target;
      break;
      
    case 'upgrade_all':
      isCompleted = checkUpgradeAllQuest();
      break;
      
    case 'final_activation':
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–ª–∞–∑–º—ã
      const plasmaCount = Number(inventory['–ü–ª–∞–∑–º–∞']) || 0;
      isCompleted = plasmaCount >= quest.target && upgrades.defenseLevel >= 5;
      break;
  }
  
  if (isCompleted) {
    completeCurrentQuest();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
function checkAllQuestsStatus() {
  storyQuests.forEach((quest, index) => {
    let status = quest.completed ? '‚úÖ' : '‚ùå';
    if (index === currentQuestIndex) status = 'üöÄ';
    console.log(`${status} ${quest.title} - ${quest.completed ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}`);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–µ—Å—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function completeCurrentQuestDebug() {
  if (currentQuestIndex < storyQuests.length) {
    const quest = storyQuests[currentQuestIndex];
    quest.completed = true;
    tng += quest.reward;
    log(`[DEBUG] –ó–∞–¥–∞–Ω–∏–µ "${quest.title}" –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    currentQuestIndex++;
    saveGame();
    render();
  }
}