class Inventory {
  constructor(game) {
    this.game = game;
  }

  handleSellTrash() {
    if (this.game.inventory['–ú—É—Å–æ—Ä'] > 0) {
      const price = this.calculateTrashPrice();
      const earned = Math.floor(this.game.inventory['–ú—É—Å–æ—Ä'] * price);
      this.game.tng += earned;
      this.game.trashSold += this.game.inventory['–ú—É—Å–æ—Ä'];
      
      this.game.log(`–ü—Ä–æ–¥–∞–Ω–æ ${this.game.inventory['–ú—É—Å–æ—Ä']} –º—É—Å–æ—Ä–∞ +${earned}‚Ç∏`);
      this.game.inventory['–ú—É—Å–æ—Ä'] = 0;
      this.game.updateCurrencyDisplay();
      this.game.saveGame();
      this.game.render();
      this.game.questsManager.checkQuests();
    }
  }

  handleRecycleTrash() {
    if (this.game.inventory['–ú—É—Å–æ—Ä'] >= 5) {
      this.game.inventory['–ú—É—Å–æ—Ä'] -= 5;
      this.game.inventory['–£–≥–æ–ª—å']++;
      this.game.coalProduced++;
      this.game.totalRecycled += 5;
      
      this.game.log('–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ 5 –º—É—Å–æ—Ä–∞ ‚Üí 1 —É–≥–æ–ª—å');
      this.game.saveGame();
      this.game.render();
      this.game.achievementsManager.checkAchievements();
      
      this.game.quests.forEach(quest => {
        if (quest.type === 'recycle') {
          quest.progress++;
        }
      });
    }
  }

  handleCoalInteraction() {
    if (this.game.sellMode && this.game.isDay) {
      if (this.game.inventory['–£–≥–æ–ª—å'] > 0) {
        this.game.inventory['–£–≥–æ–ª—å']--;
        this.game.tng += 3;
        this.game.coalEnabled = false;
        
        this.game.log('–ü—Ä–æ–¥–∞–Ω–æ 1 —É–≥–æ–ª—å +3‚Ç∏ (–¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞)');
        this.game.updateCurrencyDisplay();
        this.game.saveGame();
        this.game.render();
      }
    } 
    else if (!this.game.sellMode && !this.game.recycleMode) {
      if (!this.game.coalEnabled) {
        if (this.game.inventory['–£–≥–æ–ª—å'] > 0) {
          this.game.coalEnabled = true;
          this.game.inventory['–£–≥–æ–ª—å']--;
          
          this.game.log('–£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (-1 —É–≥–æ–ª—å)');
        } else {
          this.game.log('–ù–µ—Ç —É–≥–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!');
        }
      } else {
        this.game.coalEnabled = false;
        this.game.log('–£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      }
      this.game.saveGame();
      this.game.render();
    }
  }

  calculateTrashPrice() {
    const basePrice = 1;
    const priceDrop = Math.floor(this.game.trashSold / 5) * 0.05;
    return Math.max(basePrice - priceDrop, 0.3);
  }

  mineResources() {
    const aiActive = this.game.isDay || this.game.coalEnabled;
    if (!aiActive) {
      this.game.log('‚ùå –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ù—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è');
      return;
    }
    
    let coalChance = 0.02 + (this.game.coalEnabled ? 0.02 : 0) + (this.game.upgrades.mining * 0.01);
    let trashChance = 0.01 + (this.game.coalEnabled ? 0.01 : 0) + (this.game.upgrades.mining * 0.01);
    let chipChance = 0.005;
    let electronicsChance = 0.003;
    let crystalChance = 0.001;
    const isCritical = Math.random() < 0.05;

    if (this.game.upgrades.crystalBoost) {
      coalChance += 0.015;
      trashChance += 0.01;
      chipChance += 0.003;
      electronicsChance += 0.002;
      crystalChance += 0.0005;
    }

    let foundSomething = false;

    if (Math.random() < coalChance) {
      const amount = isCritical ? 2 : 1;
      this.game.inventory['–£–≥–æ–ª—å'] += amount;
      this.game.criticalMining = isCritical;
      
      this.game.log(`–ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} —É–≥–ª—è ü™®${isCritical ? ' ‚ú®' : ''}`);
      foundSomething = true;
      this.game.totalMined += amount;
      
      this.game.quests.forEach(quest => {
        if (quest.type === 'mine' && quest.resource === '–£–≥–æ–ª—å') {
          quest.progress = this.game.inventory['–£–≥–æ–ª—å'];
        }
      });
    }
    
    if (Math.random() < trashChance) {
      this.game.inventory['–ú—É—Å–æ—Ä']++;
      this.game.log('–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
      foundSomething = true;
      this.game.totalMined++;
      
      this.game.quests.forEach(quest => {
        if (quest.type === 'mine' && quest.resource === '–ú—É—Å–æ—Ä') {
          quest.progress = this.game.inventory['–ú—É—Å–æ—Ä'];
        }
      });
    }
    
    if (Math.random() < chipChance) {
      this.game.inventory['–ß–∏–ø—ã']++;
      this.game.criticalMining = true;
      this.game.log('–ù–∞–π–¥–µ–Ω —á–∏–ø üéõÔ∏è‚ú®');
      foundSomething = true;
      this.game.totalMined++;
      
      this.game.quests.forEach(quest => {
        if (quest.type === 'mine' && quest.resource === '–ß–∏–ø—ã') {
          quest.progress = this.game.inventory['–ß–∏–ø—ã'];
        }
      });
    }
    
    if (Math.random() < electronicsChance) {
      this.game.inventory['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞']++;
      this.game.criticalMining = true;
      this.game.log('–ù–∞–π–¥–µ–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ üíæ‚ú®');
      foundSomething = true;
      this.game.totalMined++;
      
      this.game.quests.forEach(quest => {
        if (quest.type === 'mine' && quest.resource === '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞') {
          quest.progress = this.game.inventory['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'];
        }
      });
    }
    
    if (Math.random() < crystalChance) {
      this.game.inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª'] = (this.game.inventory['–ö—Ä–∏—Å—Ç–∞–ª–ª'] || 0) + 1;
      this.game.criticalMining = true;
      this.game.log("‚ú® –ù–∞–π–¥–µ–Ω —Ä–µ–¥–∫–∏–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª!");
      foundSomething = true;
      this.game.totalMined++;
    }
    
    if (!foundSomething) {
      this.game.log('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...');
    }
    
    this.game.saveGame();
    this.game.render();
    this.game.questsManager.checkQuests();
    this.game.achievementsManager.checkAchievements();
  }
}