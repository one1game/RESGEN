// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateTrashPrice() {
  const basePrice = 1;
  const priceDrop = Math.floor(trashSold / 5) * 0.05;
  return Math.max(basePrice - priceDrop, 0.3);
}

function handleRebelAttack() {
  const threatLevel = Math.min(1, rebelActivity * 0.2);
  
  if (Math.random() < threatLevel) {
    const attackType = Math.floor(Math.random() * 5);
    let message = "üåô –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏!";
    let severeAttack = false;
    
    switch(attackType) {
      case 0: // –ö—Ä–∞–∂–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        const resources = Object.keys(inventory).filter(k => k !== '–ò–ò' && inventory[k] > 0);
        if (resources.length > 0) {
          const stolenResource = resources[Math.floor(Math.random() * resources.length)];
          const amount = Math.min(inventory[stolenResource], Math.floor(Math.random() * 3) + 1);
          inventory[stolenResource] -= amount;
          message += ` –£–∫—Ä–∞–¥–µ–Ω–æ ${amount} ${stolenResource}`;
        }
        break;
        
      case 1: // –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        if (upgrades.mining > 0 && Math.random() < 0.3) {
          upgrades.mining--;
          message += " –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–±—ã—á–∏! –£—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–∂–µ–Ω";
          severeAttack = true;
        }
        break;
        
      case 2: // –í–∞–Ω–¥–∞–ª–∏–∑–º
        if (inventory['–ú—É—Å–æ—Ä'] > 0) {
          const destroyed = Math.min(inventory['–ú—É—Å–æ—Ä'], Math.floor(Math.random() * 5) + 3);
          inventory['–ú—É—Å–æ—Ä'] -= destroyed;
          message += ` –£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ ${destroyed} –º—É—Å–æ—Ä–∞`;
        }
        break;
        
      case 3: // –ü–æ–ª–æ–º–∫–∞ —Ç—É—Ä–µ–ª–µ–π
        if (upgrades.defense && Math.random() < 0.2) {
          upgrades.defense = false;
          message += " –¢—É—Ä—Ä–µ–ª–∏ –∑–∞—â–∏—Ç—ã —Å–ª–æ–º–∞–Ω—ã!";
          severeAttack = true;
        }
        break;
        
      case 4: // –í–∑–ª–æ–º –ò–ò (—Ä–µ–¥–∫–∏–π)
        if (Math.random() < 0.1) {
          aiDisabledUntil = Date.now() + 300000; // 5 –º–∏–Ω—É—Ç
          message += " –í–∑–ª–æ–º –ò–ò! –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ 5 –º–∏–Ω—É—Ç";
          severeAttack = true;
        }
        break;
    }
    
    log(message);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
    rebelActivity += severeAttack ? 2 : 1;
    
    // –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –ø–æ—Å–ª–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∞—Ç–∞–∫
    if (severeAttack && upgrades.defenseLevel > 0 && Math.random() < 0.5) {
      upgrades.defenseLevel--;
      log("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –ø–æ–Ω–∏–∂–µ–Ω –∏–∑-–∑–∞ –∞—Ç–∞–∫–∏ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤");
    }
    
    saveGame();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
function handleCoalInteraction() {
  if (coalEnabled) {
    coalEnabled = false;
    log('–£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  } else {
    if (inventory['–£–≥–æ–ª—å'] > 0) {
      inventory['–£–≥–æ–ª—å']--;
      coalEnabled = true;
      log('–£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (-1 —É–≥–æ–ª—å)');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –¢–≠–¶
      if (currentQuestIndex < storyQuests.length && 
          storyQuests[currentQuestIndex].type === 'activate_coal') {
        checkQuestsProgress();
      }
    } else {
      log('–ù–µ—Ç —É–≥–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!');
    }
  }
  saveGame();
  render();
}

function mineResources() {
  const aiActive = (isDay || coalEnabled) && Date.now() > aiDisabledUntil;
  if (!aiActive) {
    log('‚ùå –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ù—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è');
    return;
  }
  
  let coalChance = 0.02 + (coalEnabled ? 0.02 : 0) + (upgrades.mining * 0.01);
  let trashChance = 0.01 + (coalEnabled ? 0.01 : 0) + (upgrades.mining * 0.01);
  let chipChance = 0.005;
  let plasmaChance = 0.003;
  const isCritical = Math.random() < 0.05;

  let foundSomething = false;

  if (Math.random() < coalChance) {
    const amount = isCritical ? 2 : 1;
    inventory['–£–≥–æ–ª—å'] += amount;
    criticalMining = isCritical;
    
    log(`–ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} —É–≥–ª—è ü™®${isCritical ? ' ‚ú®' : ''}`);
    foundSomething = true;
    totalMined += amount;
  }
  
  if (Math.random() < trashChance) {
    inventory['–ú—É—Å–æ—Ä']++;
    log('–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
    foundSomething = true;
    totalMined++;
  }
  
  if (Math.random() < chipChance) {
    inventory['–ß–∏–ø—ã']++;
    criticalMining = true;
    log('–ù–∞–π–¥–µ–Ω —á–∏–ø üéõÔ∏è‚ú®');
    foundSomething = true;
    totalMined++;
  }
  
  if (Math.random() < plasmaChance) {
    inventory['–ü–ª–∞–∑–º–∞']++;
    criticalMining = true;
    log('–ù–∞–π–¥–µ–Ω–∞ –ø–ª–∞–∑–º–∞ ‚ö°‚ú®');
    foundSomething = true;
    totalMined++;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–æ–±—ã—á—É
  if (foundSomething && currentQuestIndex < storyQuests.length) {
    checkQuestsProgress();
  }
  
  saveGame();
  render();
}

function upgradeMining() {
  if (upgrades.mining < 10 && inventory['–ß–∏–ø—ã'] >= 5) {
    inventory['–ß–∏–ø—ã'] -= 5;
    upgrades.mining++;
    
    log(`–£–ª—É—á—à–µ–Ω–∞ –¥–æ–±—ã—á–∞! –¢–µ–ø–µ—Ä—å +${upgrades.mining}% –∫ —à–∞–Ω—Å–∞–º`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∞–ø–≥—Ä–µ–π–¥
    if (currentQuestIndex < storyQuests.length && 
        storyQuests[currentQuestIndex].type === 'upgrade_mining') {
      checkQuestsProgress();
    }
    
    saveGame();
    render();
  }
}

function activateDefense() {
  if (!upgrades.defense && inventory['–ü–ª–∞–∑–º–∞'] >= 3) {
    inventory['–ü–ª–∞–∑–º–∞'] -= 3;
    upgrades.defense = true;
    
    log('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Ç—É—Ä—Ä–µ–ª–∏ –∑–∞—â–∏—Ç—ã! (-3 –ø–ª–∞–∑–º—ã)');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∑–∞—â–∏—Ç—ã
    if (currentQuestIndex < storyQuests.length && 
        storyQuests[currentQuestIndex].type === 'activate_defense') {
      checkQuestsProgress();
    }
    
    saveGame();
    render();
  }
}

function upgradeDefense() {
  if (upgrades.defenseLevel < 5 && 
      inventory['–ß–∏–ø—ã'] >= (upgrades.defenseLevel + 1) * 10 && 
      inventory['–ü–ª–∞–∑–º–∞'] >= 1) {
    const chipsCost = (upgrades.defenseLevel + 1) * 10;
    inventory['–ß–∏–ø—ã'] -= chipsCost;
    inventory['–ü–ª–∞–∑–º–∞'] -= 1;
    upgrades.defenseLevel++;
    
    log(`–£–ª—É—á—à–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –¥–æ —É—Ä–æ–≤–Ω—è ${upgrades.defenseLevel}! (-${chipsCost} —á–∏–ø–æ–≤ –∏ -1 –ø–ª–∞–∑–º—ã)`);
    saveGame();
    render();
  }
}