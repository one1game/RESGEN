// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateTrashPrice() {
  const basePrice = 2; // ‚Üë –£–≤–µ–ª–∏—á–∏–ª –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
  const priceDrop = Math.floor(trashSold / 8) * 0.03; // ‚Üì –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –ø–∞–¥–µ–Ω–∏–µ
  return Math.round(Math.max(basePrice - priceDrop, 1)); // ‚Üë –ú–∏–Ω–∏–º—É–º 1
}

function handleRebelAttack() {
  const defensePower = upgrades.defense ? 30 + (upgrades.defenseLevel * 15) : 0;
  const threatLevel = Math.min(1, rebelActivity * 0.15); // ‚Üì –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏–ª –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å
  
  // –®–∞–Ω—Å –∞—Ç–∞–∫–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É
  const attackChance = threatLevel * (1 - defensePower / 100);
  
  if (Math.random() < attackChance) {
    const attackTypes = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –∞—Ç–∞–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
    if (Object.keys(inventory).filter(k => k !== '–ò–ò' && inventory[k] > 0).length > 0) {
      attackTypes.push(0); // –ö—Ä–∞–∂–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    }
    if (upgrades.mining > 0) {
      attackTypes.push(1); // –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    }
    if (inventory['–ú—É—Å–æ—Ä'] > 0) {
      attackTypes.push(2); // –í–∞–Ω–¥–∞–ª–∏–∑–º
    }
    if (upgrades.defense) {
      attackTypes.push(3); // –ü–æ–ª–æ–º–∫–∞ —Ç—É—Ä–µ–ª–µ–π
    }
    attackTypes.push(4); // –í–∑–ª–æ–º –ò–ò
    
    if (attackTypes.length === 0) return;
    
    const attackType = attackTypes[Math.floor(Math.random() * attackTypes.length)];
    let message = "üåô –ü–æ–≤—Å—Ç–∞–Ω—Ü—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏!";
    let severeAttack = false;
    
    switch(attackType) {
      case 0: // –ö—Ä–∞–∂–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        const resources = Object.keys(inventory).filter(k => k !== '–ò–ò' && inventory[k] > 0);
        if (resources.length > 0) {
          const stolenResource = resources[Math.floor(Math.random() * resources.length)];
          // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞–∂–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã
          const amount = Math.min(inventory[stolenResource], 
            Math.floor(Math.random() * (4 - upgrades.defenseLevel * 0.5)) + 1);
          inventory[stolenResource] -= amount;
          message += ` –£–∫—Ä–∞–¥–µ–Ω–æ ${amount} ${stolenResource}`;
        }
        break;
        
      case 1: // –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        if (upgrades.mining > 0 && Math.random() < 0.4) { // ‚Üë –£–≤–µ–ª–∏—á–∏–ª —à–∞–Ω—Å
          const levelsLost = Math.random() < 0.2 ? 2 : 1; // 20% —à–∞–Ω—Å –ø–æ—Ç–µ—Ä—è—Ç—å 2 —É—Ä–æ–≤–Ω—è
          upgrades.mining = Math.max(0, upgrades.mining - levelsLost);
          message += ` –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–±—ã—á–∏! –£—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–∂–µ–Ω –Ω–∞ ${levelsLost}`;
          severeAttack = levelsLost > 1;
        }
        break;
        
      case 2: // –í–∞–Ω–¥–∞–ª–∏–∑–º
        if (inventory['–ú—É—Å–æ—Ä'] > 0) {
          // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –º—É—Å–æ—Ä–∞, –∞ –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          const destroyPercentage = 0.3 + Math.random() * 0.3; // 30-60% –º—É—Å–æ—Ä–∞
          const destroyed = Math.floor(inventory['–ú—É—Å–æ—Ä'] * destroyPercentage);
          inventory['–ú—É—Å–æ—Ä'] -= destroyed;
          message += ` –£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ ${destroyed} –º—É—Å–æ—Ä–∞ (${Math.round(destroyPercentage * 100)}%)`;
        }
        break;
        
      case 3: // –ü–æ–ª–æ–º–∫–∞ —Ç—É—Ä–µ–ª–µ–π
        if (upgrades.defense && Math.random() < 0.25) { // ‚Üë –£–≤–µ–ª–∏—á–∏–ª —à–∞–Ω—Å
          upgrades.defense = false;
          message += " –¢—É—Ä—Ä–µ–ª–∏ –∑–∞—â–∏—Ç—ã –≤—ã–≤–µ–¥–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ—è!";
          severeAttack = true;
        }
        break;
        
      case 4: // –í–∑–ª–æ–º –ò–ò
        if (Math.random() < 0.08) { // ‚Üì –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏–ª —à–∞–Ω—Å
          // –í—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã
          const disableTime = 180000 + (120000 * (1 - upgrades.defenseLevel * 0.2)); // 3-5 –º–∏–Ω—É—Ç
          aiDisabledUntil = Date.now() + disableTime;
          const minutes = Math.ceil(disableTime / 60000);
          message += ` –í–∑–ª–æ–º –ò–ò! –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ${minutes} –º–∏–Ω—É—Ç`;
          severeAttack = true;
        }
        break;
    }
    
    log(message);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤
    rebelActivity += severeAttack ? 2 : 1;
    
    // –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –ø–æ—Å–ª–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∞—Ç–∞–∫
    if (severeAttack && upgrades.defenseLevel > 0 && Math.random() < 0.6) { // ‚Üë –£–≤–µ–ª–∏—á–∏–ª —à–∞–Ω—Å
      upgrades.defenseLevel--;
      log("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –ø–æ–Ω–∏–∂–µ–Ω –∏–∑-–∑–∞ –∞—Ç–∞–∫–∏ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤");
    }
    
    saveGame();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
function handleCoalInteraction() {
  if (coalEnabled) {
    coalEnabled = false;
    log('‚ö° –£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  } else {
    if (inventory['–£–≥–æ–ª—å'] > 0) {
      inventory['–£–≥–æ–ª—å']--;
      coalEnabled = true;
      log('‚ö° –£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (-1 —É–≥–æ–ª—å)');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –¢–≠–¶
      if (currentQuestIndex < storyQuests.length && 
          storyQuests[currentQuestIndex].type === 'activate_coal') {
        checkQuestsProgress();
      }
    } else {
      log('‚ùå –ù–µ—Ç —É–≥–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¢–≠–¶!');
    }
  }
  saveGame();
  render();
}

function mineResources() {
  const aiActive = (isDay || coalEnabled) && Date.now() > aiDisabledUntil;
  if (!aiActive) {
    log('‚ùå –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ù—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è –¥–æ–±—ã—á–∏');
    return;
  }
  
  // –ë–∞–∑–æ–≤—ã–µ —à–∞–Ω—Å—ã —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞
  let coalChance = 0.015 + (coalEnabled ? 0.015 : 0) + (upgrades.mining * 0.008);
  let trashChance = 0.01 + (coalEnabled ? 0.008 : 0) + (upgrades.mining * 0.005);
  let chipChance = 0.004 + (upgrades.mining * 0.001);
  let plasmaChance = 0.002 + (upgrades.mining * 0.0005);
  
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (—à–∞–Ω—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ–±—ã—á–∏)
  const isCritical = Math.random() < (0.03 + upgrades.mining * 0.005);
  let foundSomething = false;
  let criticalBonus = isCritical ? 1 : 0;

  if (Math.random() < coalChance) {
    const amount = 1 + criticalBonus;
    inventory['–£–≥–æ–ª—å'] += amount;
    criticalMining = isCritical;
    
    log(`ü™® –ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} —É–≥–ª—è${isCritical ? ' ‚ú®–ö–†–ò–¢!' : ''}`);
    foundSomething = true;
    totalMined += amount;
  }
  
  if (Math.random() < trashChance) {
    const amount = 1 + criticalBonus;
    inventory['–ú—É—Å–æ—Ä'] += amount;
    log(`‚ôªÔ∏è –ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} –º—É—Å–æ—Ä–∞${isCritical ? ' ‚ú®' : ''}`);
    foundSomething = true;
    totalMined += amount;
  }
  
  if (Math.random() < chipChance) {
    const amount = 1 + criticalBonus;
    inventory['–ß–∏–ø—ã'] += amount;
    criticalMining = true;
    log(`üéõÔ∏è –ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} —á–∏–ø${amount > 1 ? '–æ–≤' : ''}${isCritical ? ' ‚ú®' : ''}`);
    foundSomething = true;
    totalMined += amount;
  }
  
  if (Math.random() < plasmaChance) {
    const amount = 1 + criticalBonus;
    inventory['–ü–ª–∞–∑–º–∞'] += amount;
    criticalMining = true;
    log(`‚ö° –ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} –ø–ª–∞–∑–º${amount > 1 ? '—ã' : '–∞'}${isCritical ? ' ‚ú®' : ''}`);
    foundSomething = true;
    totalMined += amount;
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –ò–ò –∞–∫—Ç–∏–≤–µ–Ω
  if (!foundSomething && aiActive) {
    log('‚è≥ –î–æ–±—ã—á–∞... –†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–æ–±—ã—á—É
  if (foundSomething && currentQuestIndex < storyQuests.length) {
    checkQuestsProgress();
  }
  
  saveGame();
  render();
}

function upgradeMining() {
  const requiredChips = 5 + upgrades.mining * 2; // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
  if (upgrades.mining < 10 && inventory['–ß–∏–ø—ã'] >= requiredChips) {
    inventory['–ß–∏–ø—ã'] -= requiredChips;
    upgrades.mining++;
    
    log(`üöÄ –£–ª—É—á—à–µ–Ω–∞ –¥–æ–±—ã—á–∞ –¥–æ —É—Ä–æ–≤–Ω—è ${upgrades.mining}! (-${requiredChips} —á–∏–ø–æ–≤)`);
    log(`üí´ –¢–µ–ø–µ—Ä—å +${upgrades.mining}% –∫ —à–∞–Ω—Å–∞–º –¥–æ–±—ã—á–∏`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∞–ø–≥—Ä–µ–π–¥
    if (currentQuestIndex < storyQuests.length && 
        storyQuests[currentQuestIndex].type === 'upgrade_mining') {
      checkQuestsProgress();
    }
    
    saveGame();
    render();
  } else if (upgrades.mining >= 10) {
    log('‚úÖ –î–æ–±—ã—á–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–∞!');
  } else {
    log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏–ø–æ–≤ (–Ω—É–∂–Ω–æ ${requiredChips})`);
  }
}

function activateDefense() {
  if (!upgrades.defense && inventory['–ü–ª–∞–∑–º–∞'] >= 3) {
    inventory['–ü–ª–∞–∑–º–∞'] -= 3;
    upgrades.defense = true;
    
    log('üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! (-3 –ø–ª–∞–∑–º—ã)');
    log('‚úÖ –¢–µ–ø–µ—Ä—å —Ç—É—Ä—Ä–µ–ª–∏ –±—É–¥—É—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å –∞—Ç–∞–∫–∏ –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∑–∞—â–∏—Ç—ã
    if (currentQuestIndex < storyQuests.length && 
        storyQuests[currentQuestIndex].type === 'activate_defense') {
      checkQuestsProgress();
    }
    
    saveGame();
    render();
  } else if (upgrades.defense) {
    log('‚úÖ –ó–∞—â–∏—Ç–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
  } else {
    log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–ª–∞–∑–º—ã (–Ω—É–∂–Ω–æ 3)');
  }
}

function upgradeDefense() {
  const requiredChips = (upgrades.defenseLevel + 1) * 12; // –£–≤–µ–ª–∏—á–∏–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const requiredPlasma = 1 + Math.floor(upgrades.defenseLevel / 2); // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞–∑–º—ã
  
  if (upgrades.defenseLevel < 5 && 
      inventory['–ß–∏–ø—ã'] >= requiredChips && 
      inventory['–ü–ª–∞–∑–º–∞'] >= requiredPlasma) {
    
    inventory['–ß–∏–ø—ã'] -= requiredChips;
    inventory['–ü–ª–∞–∑–º–∞'] -= requiredPlasma;
    upgrades.defenseLevel++;
    
    const defensePower = 30 + (upgrades.defenseLevel * 15);
    log(`üõ°Ô∏è –£–ª—É—á—à–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –¥–æ —É—Ä–æ–≤–Ω—è ${upgrades.defenseLevel}!`);
    log(`üìä –ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã: ${defensePower}%`);
    log(`üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: -${requiredChips} —á–∏–ø–æ–≤, -${requiredPlasma} –ø–ª–∞–∑–º—ã`);
    
    saveGame();
    render();
  } else if (upgrades.defenseLevel >= 5) {
    log('‚úÖ –ó–∞—â–∏—Ç–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!');
  } else {
    log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ (—á–∏–ø—ã: ${requiredChips}, –ø–ª–∞–∑–º–∞: ${requiredPlasma})`);
  }
}

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
function checkUpgradeAllQuest() {
  return upgrades.mining >= 10 && upgrades.defenseLevel >= 5;
}

function checkFinalActivationQuest() {
  return inventory['–ü–ª–∞–∑–º–∞'] >= 15 && upgrades.defenseLevel >= 5;
}