// game.js
document.addEventListener('DOMContentLoaded', () => {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
  const STORAGE_KEY = 'coreboxSave2';
  const maxSlots = 9;
  const leftPanelItems = ['–¢–≠–¶', '', '', '', ''];
  const rightPanelItems = ['–ü–µ—Ä–µ—Ä–∞–±–æ—Ç—á–∏–∫', '', '', '', ''];

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const inventory = { 
    '–ò–ò': 1, 
    '–£–≥–æ–ª—å': 0, 
    '–ú—É—Å–æ—Ä': 0,
    '–ß–∏–ø—ã': 0,
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': 0
  };
  
  const upgrades = {
    mining: 0,
    autoSell: false
  };
  
  let tng = 0;
  let coalEnabled = false;
  let gameTime = 15;
  let isDay = true;
  let passiveCounter = 0;
  let sellMode = false;
  let recycleMode = false;
  let trashSold = 0;
  let insuranceDays = 0;
  let criticalMining = false;

  // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  const currencyDisplay = document.getElementById('currencyDisplay');
  const timeDisplay = document.getElementById('timeDisplay');
  const logBox = document.getElementById('logBox');
  const inventoryDiv = document.getElementById('inventory');
  const leftSlotsDiv = document.getElementById('leftSlots');
  const rightSlotsDiv = document.getElementById('rightSlots');
  const aiSlot = document.getElementById('aiSlot');
  const mineBtn = document.getElementById('mineBtn');
  const miningBonusSpan = document.getElementById('miningBonus');
  const toggleTradeBtn = document.getElementById('toggleTrade');
  const toggleRecycleBtn = document.getElementById('toggleRecycle');

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  function log(message) {
    logBox.innerHTML += `üü¢ ${message}<br>`;
    logBox.scrollTop = logBox.scrollHeight;
  }

  function updateTimeDisplay() {
    const icon = isDay ? 'üåû' : 'üåô';
    timeDisplay.innerText = `${icon} ${isDay ? '–î–µ–Ω—å' : '–ù–æ—á—å'} ‚Äî ${gameTime}s`;
  }

  function updateCurrencyDisplay() {
    currencyDisplay.innerText = `TNG: ${tng}‚Ç∏`;
  }

  // –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  function saveGame() {
    const saveData = {
      inventory,
      tng,
      coalEnabled,
      gameTime,
      isDay,
      passiveCounter,
      sellMode,
      recycleMode,
      trashSold,
      insuranceDays,
      upgrades
    };
    localStorage.setItem(STORAGE_KEY, JSON.stringify(saveData));
  }

  function loadGame() {
    const saved = localStorage.getItem(STORAGE_KEY);
    if (saved) {
      try {
        const data = JSON.parse(saved);
        Object.keys(inventory).forEach(key => {
          if (data.inventory[key] !== undefined) inventory[key] = data.inventory[key];
        });
        tng = data.tng ?? 0;
        coalEnabled = data.coalEnabled ?? false;
        gameTime = data.gameTime ?? 15;
        isDay = data.isDay ?? true;
        passiveCounter = data.passiveCounter ?? 0;
        sellMode = data.sellMode ?? false;
        recycleMode = data.recycleMode ?? false;
        trashSold = data.trashSold ?? 0;
        insuranceDays = data.insuranceDays ?? 0;
        upgrades.mining = data.upgrades?.mining ?? 0;
        upgrades.autoSell = data.upgrades?.autoSell ?? false;
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', e);
      }
    }
  }

  // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
  function calculateTrashPrice() {
    const basePrice = 1;
    const priceDrop = Math.floor(trashSold / 5) * 0.05;
    return Math.max(basePrice - priceDrop, 0.3);
  }

  function render() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å –¥–æ–±—ã—á–∏
    miningBonusSpan.textContent = upgrades.mining;

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    inventoryDiv.innerHTML = '';
    leftSlotsDiv.innerHTML = '';
    rightSlotsDiv.innerHTML = '';

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    Object.entries(inventory).forEach(([name, count]) => {
      if (name === '–ò–ò') return;
      
      const slot = createInventorySlot(name, count);
      inventoryDiv.appendChild(slot);
    });

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
    while (inventoryDiv.children.length < maxSlots) {
      const slot = createEmptySlot();
      inventoryDiv.appendChild(slot);
    }

    // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–¢–≠–¶)
    renderLeftPanel();

    // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–ü–µ—Ä–µ—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –∞–ø–≥—Ä–µ–π–¥—ã)
    renderRightPanel();

    // –°—Ç–∞—Ç—É—Å –ò–ò
    const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] > 0);
    aiSlot.textContent = aiActive ? 'ü§ñ –ò–ò –∞–∫—Ç–∏–≤–µ–Ω' : 'üõë –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
    aiSlot.style.color = aiActive ? 'lime' : 'red';
    
    if (insuranceDays > 0) {
      aiSlot.textContent += ` (–°—Ç—Ä–∞—Ö–æ–≤–∫–∞: ${insuranceDays}–¥)`;
    }

    updateTimeDisplay();
    updateCurrencyDisplay();
  }

  function createInventorySlot(name, count) {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.textContent = `${name} x${count}`;

    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –¥–æ–±—ã—á–∏
    if (criticalMining && (name === '–£–≥–æ–ª—å' || name === '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')) {
      slot.classList.add('critical');
      criticalMining = false;
    }
    
    // –ë–æ–Ω—É—Å—ã –¥–æ–±—ã—á–∏
    if (name === '–£–≥–æ–ª—å' || name === '–ú—É—Å–æ—Ä') {
      const bonusDiv = document.createElement('div');
      bonusDiv.className = 'mining-bonus';
      const baseChance = name === '–£–≥–æ–ª—å' ? 3 : 1.5;
      const totalBonus = upgrades.mining + (coalEnabled ? (name === '–£–≥–æ–ª—å' ? 2 : 1) : 0);
      bonusDiv.textContent = `+${baseChance + totalBonus}%`;
      slot.appendChild(bonusDiv);
    }

    // –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂–∏
    if (sellMode && name === '–ú—É—Å–æ—Ä') {
      slot.classList.add('sell-mode');
      const sellLabel = document.createElement('div');
      sellLabel.className = 'sell-label';
      sellLabel.textContent = count > 0 ? `–ü—Ä–æ–¥–∞—Ç—å (${calculateTrashPrice().toFixed(1)}‚Ç∏)` : '–ù–µ—Ç –º—É—Å–æ—Ä–∞';
      slot.appendChild(sellLabel);
      
      slot.onclick = () => handleSellTrash();
    } 
    // –†–µ–∂–∏–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
    else if (recycleMode && name === '–ú—É—Å–æ—Ä') {
      slot.classList.add('recycle-mode');
      const recycleLabel = document.createElement('div');
      recycleLabel.className = 'recycle-label';
      recycleLabel.textContent = count >= 5 ? '5‚Üí1 —É–≥–æ–ª—å' : '–ù—É–∂–Ω–æ 5';
      slot.appendChild(recycleLabel);
      
      slot.onclick = () => handleRecycleTrash();
    }
    // –£–≥–æ–ª—å
    else if (name === '–£–≥–æ–ª—å') {
      if (coalEnabled) {
        slot.style.borderColor = 'gold';
        slot.style.boxShadow = '0 0 8px gold';
      }
      
      slot.onclick = () => handleCoalInteraction();
    }
    // –ß–∏–ø—ã –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–æ–≤
    else if (name === '–ß–∏–ø—ã' && count > 0) {
      slot.classList.add('upgrade');
      slot.onclick = () => handleChipsUpgrade();
    }

    return slot;
  }

  function createEmptySlot() {
    const slot = document.createElement('div');
    slot.className = 'slot';
    slot.textContent = '[–ø—É—Å—Ç–æ]';
    return slot;
  }

  function renderLeftPanel() {
    leftPanelItems.forEach((name, index) => {
      const slot = document.createElement('div');
      slot.className = 'slot';
      
      if (index === 0) {
        slot.textContent = coalEnabled ? '–¢–≠–¶ üî•' : '–¢–≠–¶';
        if (coalEnabled) {
          slot.style.borderColor = 'gold';
          slot.style.boxShadow = '0 0 8px gold';
        }
      } else {
        slot.textContent = name || '[–ø—É—Å—Ç–æ]';
      }
      
      leftSlotsDiv.appendChild(slot);
    });
  }

  function renderRightPanel() {
    rightPanelItems.forEach((name, index) => {
      const slot = document.createElement('div');
      slot.className = 'slot';
      
      if (index === 0) {
        slot.textContent = '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç—á–∏–∫';
      } else if (index === 4) {
        slot.textContent = '–ê–ø–≥—Ä–µ–π–¥—ã';
        const progress = document.createElement('div');
        progress.className = 'progress-bar';
        const fill = document.createElement('div');
        fill.className = 'progress-fill';
        fill.style.width = `${upgrades.mining * 10}%`;
        progress.appendChild(fill);
        slot.appendChild(document.createTextNode(`–î–æ–±—ã—á–∞ +${upgrades.mining}%`));
        slot.appendChild(progress);
        
        if (upgrades.autoSell) {
          slot.appendChild(document.createTextNode('–ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ ‚úÖ'));
        }
        
        const upgradeContainer = document.createElement('div');
        upgradeContainer.className = 'upgrade-container';
        
        for (let i = 0; i < 10; i++) {
          const icon = document.createElement('div');
          icon.className = 'upgrade-icon';
          icon.textContent = i < upgrades.mining ? '‚úì' : '';
          upgradeContainer.appendChild(icon);
        }
        
        slot.appendChild(upgradeContainer);
      } else {
        slot.textContent = name || '[–ø—É—Å—Ç–æ]';
      }
      
      rightSlotsDiv.appendChild(slot);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
  function handleSellTrash() {
    if (inventory['–ú—É—Å–æ—Ä'] > 0) {
      const price = calculateTrashPrice();
      tng += Math.floor(inventory['–ú—É—Å–æ—Ä'] * price);
      trashSold += inventory['–ú—É—Å–æ—Ä'];
      log(`–ü—Ä–æ–¥–∞–Ω–æ ${inventory['–ú—É—Å–æ—Ä']} –º—É—Å–æ—Ä–∞ +${Math.floor(inventory['–ú—É—Å–æ—Ä'] * price)}‚Ç∏`);
      inventory['–ú—É—Å–æ—Ä'] = 0;
      updateCurrencyDisplay();
      saveGame();
      render();
    }
  }

  function handleRecycleTrash() {
    if (inventory['–ú—É—Å–æ—Ä'] >= 5) {
      inventory['–ú—É—Å–æ—Ä'] -= 5;
      inventory['–£–≥–æ–ª—å']++;
      log('–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ 5 –º—É—Å–æ—Ä–∞ ‚Üí 1 —É–≥–æ–ª—å');
      saveGame();
      render();
    }
  }

  function handleCoalInteraction() {
    if (sellMode && isDay) {
      if (inventory['–£–≥–æ–ª—å'] > 0) {
        inventory['–£–≥–æ–ª—å']--;
        tng += 3;
        coalEnabled = false;
        log('–ü—Ä–æ–¥–∞–Ω–æ 1 —É–≥–æ–ª—å +3‚Ç∏ (–¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞)');
        updateCurrencyDisplay();
        saveGame();
        render();
      }
    } 
    else if (!sellMode && !recycleMode) {
      if (!coalEnabled) {
        if (inventory['–£–≥–æ–ª—å'] > 0) {
          coalEnabled = true;
          inventory['–£–≥–æ–ª—å']--;
          log('–£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (-1 —É–≥–æ–ª—å)');
        } else {
          log('–ù–µ—Ç —É–≥–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!');
        }
      } else {
        coalEnabled = false;
        log('–£–≥–æ–ª—å–Ω–∞—è –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      }
      saveGame();
      render();
    }
  }

  function handleChipsUpgrade() {
    if (upgrades.mining < 10 && inventory['–ß–∏–ø—ã'] >= 5) {
      inventory['–ß–∏–ø—ã'] -= 5;
      upgrades.mining++;
      log(`–ê–ø–≥—Ä–µ–π–¥ –¥–æ–±—ã—á–∏! –¢–µ–ø–µ—Ä—å +${upgrades.mining}% –∫ —à–∞–Ω—Å–∞–º`);
      saveGame();
      render();
    } else if (!upgrades.autoSell && inventory['–ß–∏–ø—ã'] >= 20) {
      inventory['–ß–∏–ø—ã'] -= 20;
      upgrades.autoSell = true;
      log('–ê–ø–≥—Ä–µ–π–¥: –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ –º—É—Å–æ—Ä–∞!');
      saveGame();
      render();
    }
  }

  function mineResources() {
    const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] > 0);
    if (!aiActive) {
      log('‚ùå –ò–ò –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ù—É–∂–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è');
      return;
    }
    
    const coalChance = 0.03 + (coalEnabled ? 0.02 : 0) + (upgrades.mining * 0.01);
    const trashChance = 0.015 + (coalEnabled ? 0.01 : 0) + (upgrades.mining * 0.01);
    const chipChance = 0.01;
    const isCritical = Math.random() < 0.1;

    if (Math.random() < coalChance) {
      const amount = isCritical ? 2 : 1;
      inventory['–£–≥–æ–ª—å'] += amount;
      criticalMining = isCritical;
      log(`–ù–∞–π–¥–µ–Ω${amount > 1 ? '–æ' : ''} ${amount} —É–≥–ª—è ü™®${isCritical ? ' ‚ú®' : ''}`);
    }
    
    if (Math.random() < trashChance) {
      inventory['–ú—É—Å–æ—Ä']++;
      log('–ù–∞–π–¥–µ–Ω –º—É—Å–æ—Ä ‚ôªÔ∏è');
    }
    
    if (Math.random() < chipChance) {
      inventory['–ß–∏–ø—ã']++;
      criticalMining = true;
      log('–ù–∞–π–¥–µ–Ω —á–∏–ø üéõÔ∏è‚ú®');
    }
    
    if (isCritical && Math.random() < 0.3) {
      inventory['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞']++;
      log('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–±—ã—á–∞: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ üíæ‚ú®');
    }
    
    if (upgrades.autoSell && inventory['–ú—É—Å–æ—Ä'] > 0) {
      const price = calculateTrashPrice() * 0.5;
      tng += Math.floor(inventory['–ú—É—Å–æ—Ä'] * price);
      trashSold += inventory['–ú—É—Å–æ—Ä'];
      log(`–ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞: ${inventory['–ú—É—Å–æ—Ä']} –º—É—Å–æ—Ä–∞ +${Math.floor(inventory['–ú—É—Å–æ—Ä'] * price)}‚Ç∏`);
      inventory['–ú—É—Å–æ—Ä'] = 0;
      updateCurrencyDisplay();
    }
    
    saveGame();
    render();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  function initEventListeners() {
    mineBtn.addEventListener('click', mineResources);
    toggleTradeBtn.addEventListener('click', toggleTradeMode);
    toggleRecycleBtn.addEventListener('click', toggleRecycleMode);
    
    document.addEventListener('keydown', (e) => {
      if (e.key === 'i' && isDay && tng >= 10) {
        buyInsurance();
      }
    });
  }

  function toggleTradeMode() {
    sellMode = !sellMode;
    if (sellMode) recycleMode = false;
    log(sellMode ? '–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–∫–ª—é—á—ë–Ω' : '–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω');
    saveGame();
    render();
  }

  function toggleRecycleMode() {
    recycleMode = !recycleMode;
    if (recycleMode) sellMode = false;
    log(recycleMode ? '–†–µ–∂–∏–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –≤–∫–ª—é—á—ë–Ω' : '–†–µ–∂–∏–º –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω');
    saveGame();
    render();
  }

  function buyInsurance() {
    tng -= 10;
    insuranceDays += 3;
    log('–ö—É–ø–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ 3 –Ω–æ—á–∏ (-10‚Ç∏)');
    updateCurrencyDisplay();
    saveGame();
    render();
  }

  function gameLoop() {
    gameTime--;
    if (gameTime <= 0) {
      gameTime = 15;
      isDay = !isDay;
      
      if (!isDay) {
        handleNightTransition();
      } else {
        handleDayTransition();
      }
      
      log(isDay ? 'üåû –ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å' : 'üåô –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å');
      saveGame();
    }

    handlePassiveIncome();
    render();
  }

  function handleNightTransition() {
    if (coalEnabled) {
      if (inventory['–£–≥–æ–ª—å'] > 0) {
        inventory['–£–≥–æ–ª—å']--;
        log('üåô –ù–æ—á—å - —Å–≥–æ—Ä–µ–ª 1 —É–≥–æ–ª—å');
      } else {
        coalEnabled = false;
        log('üåô –ù–æ—á—å - —É–≥–æ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –¢–≠–¶ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      }
    }
    
    if (!coalEnabled && !isDay && insuranceDays === 0 && Math.random() < 0.2) {
      const items = Object.keys(inventory).filter(k => k !== '–ò–ò' && inventory[k] > 0);
      if (items.length > 0) {
        const stolenItem = items[Math.floor(Math.random() * items.length)];
        inventory[stolenItem]--;
        log(`üåô –í–æ—Ä—ã —É–∫—Ä–∞–ª–∏ 1 ${stolenItem}! –ö—É–ø–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –¥–Ω—ë–º.`);
      }
    }
  }

  function handleDayTransition() {
    if (insuranceDays > 0) {
      insuranceDays--;
      if (insuranceDays === 0) {
        log('üåû –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å');
      }
    }
    
    if (insuranceDays === 0 && tng >= 10 && Math.random() < 0.3) {
      log('–°—Ç—Ä–∞—Ö–æ–≤—â–∏–∫: "–ö—É–ø–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –∑–∞ 10‚Ç∏ (3 –Ω–æ—á–∏)"');
    }
  }

  function handlePassiveIncome() {
    passiveCounter++;
    if (passiveCounter >= 10) {
      passiveCounter = 0;
      const aiActive = isDay || (coalEnabled && inventory['–£–≥–æ–ª—å'] > 0);
      if (aiActive) {
        const coalChance = 0.003 + (upgrades.mining * 0.001);
        const trashChance = 0.007 + (upgrades.mining * 0.001);
        
        if (Math.random() < coalChance) {
          inventory['–£–≥–æ–ª—å']++;
          log('–ü–∞—Å—Å–∏–≤–Ω–æ: —É–≥–æ–ª—å ü™®');
        }
        if (Math.random() < trashChance) {
          inventory['–ú—É—Å–æ—Ä']++;
          log('–ü–∞—Å—Å–∏–≤–Ω–æ: –º—É—Å–æ—Ä ‚ôªÔ∏è');
        }
        
        if (upgrades.autoSell && inventory['–ú—É—Å–æ—Ä'] > 0) {
          const price = calculateTrashPrice() * 0.5;
          tng += Math.floor(inventory['–ú—É—Å–æ—Ä'] * price);
          trashSold += inventory['–ú—É—Å–æ—Ä'];
          log(`–ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞: ${inventory['–ú—É—Å–æ—Ä']} –º—É—Å–æ—Ä–∞ +${Math.floor(inventory['–ú—É—Å–æ—Ä'] * price)}‚Ç∏`);
          inventory['–ú—É—Å–æ—Ä'] = 0;
          updateCurrencyDisplay();
        }
        
        saveGame();
      }
    }
  }

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  function initGame() {
    loadGame();
    initEventListeners();
    render();
    setInterval(gameLoop, 1000);
    log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CoreBox 2.1!');
    log('–ù–∞–∂–º–∏ "I" –¥–Ω—ë–º —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É (10‚Ç∏)');
  }

  initGame();
});